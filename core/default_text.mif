DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00000217;   % 224:     la  tp, ExceptionHandling   # carrega em tp o endere�o base das rotinas do sistema ECALL %
00000001 : 29c20213;   % 224:  %
00000002 : 00521073;   % 225:     csrw    tp, utvec       # seta utvec para o endere�o tp %
00000003 : 0000e073;   % 226:     csrsi   ustatus, 1      # seta o bit de habilita��o de interrup��o em ustatus (reg 0) %
00000004 : 0000c6b7;   % 36:     li a3,0xC7FF        # print string de teste %
00000005 : 7ff68693;   % 36:  %
00000006 : 06800893;   % 37:     li a7, 104 %
00000007 : 0fc10517;   % 38:     la a0, MSG3 %
00000008 : 03e50513;   % 38:  %
00000009 : 02400593;   % 39:     li a1, 36 %
0000000a : 00400613;   % 40:     li a2, 4 %
0000000b : 00000713;   % 41:     li a4, 0 %
0000000c : 3e800d93;   % 44:     li s11, 1000    # contador de Loops %
0000000d : c0102d73;   % 45:     rdtime s10  # le o tempo inicial %
0000000e : c0202c73;   % 46:     rdinstret s8    # le o numero de instru��es inicial %
0000000f : 0fc10317;   % 48: MAIN:   la t1, F0 %
00000010 : fc430313;   % 48:  %
00000011 : 00032007;   % 49:     flw ft0, 0(t1) %
00000012 : 00432087;   % 50:     flw ft1, 4(t1) %
00000013 : 00107f53;   % 52:     fadd.s ft10, ft0, ft1 # resultado da soma %
00000014 : 00832f87;   % 53:     flw ft11, 8(t1) %
00000015 : a1ff22d3;   % 54:     feq.s t0, ft10, ft11 %
00000016 : 00029463;   % 55:     bne t0, zero, PULAERRO1 %
00000017 : 1e8002ef;   % 56:     jal t0, ERRO %
00000018 : 0800ff53;   % 58: PULAERRO1: fsub.s ft10, ft1, ft0 # teste subtracao %
00000019 : 00c32f87;   % 59:        flw ft11, 12(t1) %
0000001a : a1ff22d3;   % 60:        feq.s t0, ft10, ft11 %
0000001b : 00029463;   % 61:        bne t0, zero, PULAERRO2 %
0000001c : 1d4002ef;   % 62:        jal t0, ERRO %
0000001d : 10107f53;   % 64: PULAERRO2: fmul.s ft10, ft0, ft1 # teste multiplicacao %
0000001e : 01032f87;   % 65:        flw ft11, 16(t1) %
0000001f : a1ff22d3;   % 66:        feq.s t0, ft10, ft11 %
00000020 : 00029463;   % 67:        bne t0, zero, PULAERRO3 %
00000021 : 1c0002ef;   % 68:        jal t0, ERRO %
00000022 : 18107f53;   % 70: PULAERRO3: fdiv.s ft10, ft0, ft1 # teste divisao %
00000023 : 01432f87;   % 71:        flw ft11, 20(t1) %
00000024 : a1ff22d3;   % 72:        feq.s t0, ft10, ft11 %
00000025 : 00029463;   % 73:        bne t0, zero, PULAERRO4 %
00000026 : 1ac002ef;   % 74:        jal t0, ERRO %
00000027 : 5800ff53;   % 76: PULAERRO4: fsqrt.s ft10, ft1 # teste sqrt %
00000028 : 01832f87;   % 77:        flw ft11, 24(t1) %
00000029 : a1ff22d3;   % 78:        feq.s t0, ft10, ft11 %
0000002a : 00029463;   % 79:        bne t0, zero, PULAERRO5 %
0000002b : 198002ef;   % 80:        jal t0, ERRO %
0000002c : c000f3d3;   % 82: PULAERRO5: fcvt.w.s t2, ft1  # teste cvt w s %
0000002d : 01c32e03;   % 83:        lw t3, 28(t1) %
0000002e : 01c38463;   % 84:        beq t2, t3, PULAERRO6 %
0000002f : 188002ef;   % 85:        jal t0, ERRO %
00000030 : c010f3d3;   % 87: PULAERRO6: fcvt.wu.s t2, ft1 # teste cvt wu s %
00000031 : 02032e03;   % 88:        lw t3, 32(t1) %
00000032 : 01c38463;   % 89:        beq t2, t3, PULAERRO7 %
00000033 : 178002ef;   % 90:        jal t0, ERRO %
00000034 : 00400393;   % 92: PULAERRO7: li t2, 4        # teste cvt s w %
00000035 : d003ff53;   % 93:        fcvt.s.w ft10, t2 %
00000036 : 00000013;   % 94:        nop              # Bug na unidade Forward %
00000037 : a01f22d3;   % 95:        feq.s t0, ft10, ft1 %
00000038 : 00029463;   % 96:        bne t0, zero, PULAERRO8 %
00000039 : 160002ef;   % 97:        jal t0, ERRO %
0000003a : 00400393;   % 99: PULAERRO8: li t2, 4      # teste cvt s wu %
0000003b : d013ff53;   % 100:        fcvt.s.wu ft10, t2 %
0000003c : 00000013;   % 101:        nop              # Bug na unidade Forward %
0000003d : a01f22d3;   % 102:        feq.s t0, ft10, ft1 %
0000003e : 00029463;   % 103:        bne t0, zero, PULAERRO9 %
0000003f : 148002ef;   % 104:        jal t0, ERRO %
00000040 : 404003b7;   % 106: PULAERRO9: li t2, 0x40400000 # teste mv s x %
00000041 : 00038393;   % 106:  %
00000042 : f0038f53;   % 107:        fmv.s.x ft10, t2 %
00000043 : a1e022d3;   % 108:        feq.s t0, ft0, ft10 %
00000044 : 00029463;   % 109:        bne t0, zero, PULAERRO10 %
00000045 : 130002ef;   % 110:        jal t0, ERRO %
00000046 : 408003b7;   % 112: PULAERRO10: li t2, 0x40800000 # teste mv x s %
00000047 : 00038393;   % 112:  %
00000048 : e0008e53;   % 113:         fmv.x.s t3, ft1 %
00000049 : 01c38463;   % 114:         beq t2, t3, PULAERRO11 %
0000004a : 11c002ef;   % 115:         jal t0, ERRO %
0000004b : a00022d3;   % 117: PULAERRO11: feq.s t0, ft0, ft0 # teste feq %
0000004c : 00029463;   % 118:         bne t0, zero, PULAERRO12 %
0000004d : 110002ef;   % 119:         jal t0, ERRO %
0000004e : a01002d3;   % 121: PULAERRO12: fle.s t0, ft0, ft1 # teste fle %
0000004f : 00029463;   % 122:         bne t0, zero, PULAERRO13 %
00000050 : 104002ef;   % 123:         jal t0, ERRO %
00000051 : a01012d3;   % 125: PULAERRO13: flt.s t0, ft0, ft1 # teste flt %
00000052 : 00029463;   % 126:         bne t0, zero, PULAERRO14 %
00000053 : 0f8002ef;   % 127:         jal t0, ERRO %
00000054 : 00032107;   % 129: PULAERRO14: flw ft2, 0(t1) # testes flw e fsw %
00000055 : 02232227;   % 130:         fsw ft2, 36(t1) %
00000056 : 02432107;   % 131:         flw ft2, 36(t1) %
00000057 : e00102d3;   % 132:         fmv.x.s t0, ft2 %
00000058 : 00029463;   % 133:         bne t0, zero, PULAERRO15 %
00000059 : 0e0002ef;   % 134:         jal t0, ERRO %
0000005a : 20100f53;   % 136: PULAERRO15: fsgnj.s ft10, ft0, ft1 # teste fsgnj %
0000005b : a00f22d3;   % 137:         feq.s t0, ft10, ft0 %
0000005c : 00029463;   % 138:         bne t0, zero, PULAERRO16 %
0000005d : 0d0002ef;   % 139:         jal t0, ERRO %
0000005e : 20101f53;   % 141: PULAERRO16: fsgnjn.s ft10, ft0, ft1 # teste fsgnjn %
0000005f : 02832f87;   % 142:         flw ft11, 40(t1) %
00000060 : a1efa2d3;   % 143:         feq.s t0, ft11, ft10 %
00000061 : 00029463;   % 144:         bne t0, zero, PULAERRO17 %
00000062 : 0bc002ef;   % 145:         jal t0, ERRO %
00000063 : 20102f53;   % 147: PULAERRO17: fsgnjx.s ft10, ft0, ft1 # teste fsgnjx %
00000064 : a00f22d3;   % 148:         feq.s t0, ft10, ft0 %
00000065 : 00029463;   % 149:         bne t0, zero, PULAERRO18 %
00000066 : 0ac002ef;   % 150:         jal t0, ERRO %
00000067 : 28101f53;   % 152: PULAERRO18: fmax.s ft10, ft0, ft1 # teste fmax %
00000068 : a01f22d3;   % 153:         feq.s t0, ft10, ft1 %
00000069 : 00029463;   % 154:         bne t0, zero, PULAERRO19 %
0000006a : 09c002ef;   % 155:         jal t0, ERRO %
0000006b : 28100f53;   % 157: PULAERRO19: fmin.s ft10, ft0, ft1 # teste fmin %
0000006c : a00f22d3;   % 158:         feq.s t0, ft10, ft0 %
0000006d : 00029463;   % 159:         bne t0, zero, SUCESSO %
0000006e : 08c002ef;   % 160:         jal t0, ERRO %
0000006f : fffd8d93;   % 163: SUCESSO: addi s11,s11,-1 %
00000070 : e60d9ee3;   % 164:      bne s11,zero, MAIN %
00000071 : c0102cf3;   % 165:      rdtime s9 %
00000072 : c0202bf3;   % 166:      rdinstret s7 %
00000073 : 03800513;   % 168:     li a0, 0x38         # pinta a tela de verde %
00000074 : 00000593;   % 169:     li a1, 0 %
00000075 : 09400893;   % 170:     li a7, 148 %
00000076 : 00000073;   % 171:     ecall %
00000077 : 000046b7;   % 173:     li a3,0x3800        # print string sucesso %
00000078 : 80068693;   % 173:  %
00000079 : 06800893;   % 174:     li a7, 104 %
0000007a : 0fc10517;   % 175:     la a0, MSG2 %
0000007b : e5850513;   % 175:  %
0000007c : 04000593;   % 176:     li a1, 64 %
0000007d : 00400613;   % 177:     li a2, 4 %
0000007e : 00000713;   % 178:     li a4, 0 %
0000007f : 00000073;   % 179:     ecall %
00000080 : 418b8533;   % 181:     sub a0,s7,s8        # printa a qtd de insts %
00000081 : 06500893;   % 182:     li a7, 101 %
00000082 : 00400593;   % 183:     li a1, 4 %
00000083 : 00400613;   % 184:     li a2, 4 %
00000084 : 000046b7;   % 185:     li a3, 0x3800 %
00000085 : 80068693;   % 185:  %
00000086 : 00000713;   % 186:     li a4, 0 %
00000087 : 00000073;   % 187:     ecall %
00000088 : 41ac8533;   % 189:     sub a0,s9,s10       # printa o tempo gasto %
00000089 : 06500893;   % 190:     li a7, 101 %
0000008a : 11000593;   % 191:     li a1, 272 %
0000008b : 00400613;   % 192:     li a2, 4 %
0000008c : 000046b7;   % 193:     li a3, 0x3800 %
0000008d : 80068693;   % 193:  %
0000008e : 00000713;   % 194:     li a4, 0 %
0000008f : 00000073;   % 195:     ecall %
00000090 : 0500006f;   % 197:     j END %
00000091 : 00700513;   % 200: ERRO:   li a0, 0x07     # pinta a tela de vermelho %
00000092 : 09400893;   % 201:     li a7, 148 %
00000093 : 00000593;   % 202:     li a1, 0 %
00000094 : 00000073;   % 203:     ecall %
00000095 : 06800893;   % 206:     li a7, 104 %
00000096 : 0fc10517;   % 207:     la a0, MSG %
00000097 : dd450513;   % 207:  %
00000098 : 00400593;   % 208:     li a1, 4 %
00000099 : 00400613;   % 209:     li a2, 4 %
0000009a : 70000693;   % 210:     li a3, 0x0700 %
0000009b : 00000713;   % 211:     li a4, 0 %
0000009c : 00000073;   % 212:     ecall %
0000009d : ff428513;   % 215:     addi a0, t0, -12 #Endereco onde ocorreu o erro %
0000009e : 08600893;   % 216:     li a7, 134 %
0000009f : 09800593;   % 217:     li a1, 152 %
000000a0 : 00400613;   % 218:     li a2, 4 %
000000a1 : 70000693;   % 219:     li a3, 0x0700 %
000000a2 : 00000713;   % 220:     li a4, 0 %
000000a3 : 00000073;   % 221:     ecall %
000000a4 : 00a00893;   % 223: END:    addi a7, zero, 10 %
000000a5 : 00000073;   % 224:     ecall %
000000a6 : 0420d073;   % 107:     csrwi ucause,1      # caso ocorra dropdown vai gerar exce��o de instru��o inv�lida %
000000a7 : ff810113;   % 109: ExceptionHandling:  addi    sp, sp, -8  # salva 2 registradores utilizados para comparar ucause %
000000a8 : 00512023;   % 110:     sw  t0, 0(sp) %
000000a9 : 01a12223;   % 111:     sw  s10, 4(sp) %
000000aa : 04202d73;   % 113:     csrr    s10,ucause     # le o ucause e salva em s10 %
000000ab : 00800293;   % 115:     li  t0, 8 %
000000ac : 01a29a63;   % 116:     bne     t0, s10, errorExceptions    # N�o � ecall - nem precisa arrumar a pilha! %
000000ad : 00012283;   % 118:     lw  t0, 0(sp)           # � ecall %
000000ae : 00412d03;   % 119:         lw  s10, 4(sp)              # recupera registradores usados %
000000af : 00810113;   % 120:         addi    sp, sp, 8 %
000000b0 : 1e00006f;   % 121:     j   ecallException %
000000b1 : 04302df3;   % 127: errorExceptions: csrr   s11, utval      # le o utval da exce��o e salva em s11 %
000000b2 : 0c000513;   % 128:     addi    a0, zero, 0xc0      ## printa tela de azul %
000000b3 : 00000593;   % 129:     addi    a1, zero, 0 %
000000b4 : 09400893;   % 130:     addi    a7, zero, 148 %
000000b5 : 2dc010ef;   % 131:     jal     clsCLS %
000000b6 : 00000293;   % 134: End_Cause0: li  t0, 0 %
000000b7 : 03a29263;   % 135:         bne     t0, s10, End_Cause1 %
000000b8 : 0fc10517;   % 136:         la  a0, Cause0 %
000000b9 : 40850513;   % 136:  %
000000ba : 00000593;   % 137:         li  a1, 0 %
000000bb : 00100613;   % 138:         li  a2, 1 %
000000bc : 0000c6b7;   % 139:         li  a3, 0x0000c0ff %
000000bd : 0ff68693;   % 139:  %
000000be : 10d000ef;   % 140:         jal printString %
000000bf : 16c0006f;   % 141:         j   End_uepc %
000000c0 : 00100293;   % 144: End_Cause1: li  t0, 1 %
000000c1 : 03a29263;   % 145:         bne     t0, s10, End_Cause2 %
000000c2 : 0fc10517;   % 146:         la  a0, Cause1 %
000000c3 : 40950513;   % 146:  %
000000c4 : 00000593;   % 147:         li  a1, 0 %
000000c5 : 00100613;   % 148:         li  a2, 1 %
000000c6 : 0000c6b7;   % 149:         li  a3, 0x0000c0ff %
000000c7 : 0ff68693;   % 149:  %
000000c8 : 0e5000ef;   % 150:         jal     printString %
000000c9 : 1440006f;   % 151:         j   End_uepc %
000000ca : 00200293;   % 154: End_Cause2: li  t0, 2 %
000000cb : 03a29663;   % 155:         bne     t0, s10, End_Cause4 %
000000cc : 0fc10517;   % 156:         la  a0, Cause2 %
000000cd : 40450513;   % 156:  %
000000ce : 00000593;   % 157:         li  a1, 0 %
000000cf : 00100613;   % 158:         li  a2, 1 %
000000d0 : 0000c6b7;   % 159:         li  a3, 0x0000c0ff %
000000d1 : 0ff68693;   % 159:  %
000000d2 : 0bd000ef;   % 160:         jal     printString %
000000d3 : 0fc10517;   % 162:         la  a0, Instr %
000000d4 : 4ae50513;   % 162:  %
000000d5 : 0e80006f;   % 163:         j   End_utval %
000000d6 : 00400293;   % 166: End_Cause4: addi    t0, zero, 4 %
000000d7 : 03a29663;   % 167:         bne t0, s10, End_Cause5 %
000000d8 : 0fc10517;   % 168:         la  a0, Cause4 %
000000d9 : 3f150513;   % 168:  %
000000da : 00000593;   % 169:         li  a1, 0 %
000000db : 00100613;   % 170:         li  a2, 1 %
000000dc : 0000c6b7;   % 171:         li  a3, 0x0000c0ff %
000000dd : 0ff68693;   % 171:  %
000000de : 08d000ef;   % 172:         jal printString %
000000df : 0fc10517;   % 174:         la  a0, Addrs %
000000e0 : 47650513;   % 174:  %
000000e1 : 0b80006f;   % 175:         j   End_utval %
000000e2 : 00500293;   % 178: End_Cause5: li  t0, 5 %
000000e3 : 03a29663;   % 179:         bne     t0, s10, End_Cause6 %
000000e4 : 0fc10517;   % 180:         la  a0, Cause5 %
000000e5 : 3e350513;   % 180:  %
000000e6 : 00000593;   % 181:         li  a1, 0 %
000000e7 : 00100613;   % 182:         li  a2, 1 %
000000e8 : 0000c6b7;   % 183:         li  a3, 0x0000c0ff %
000000e9 : 0ff68693;   % 183:  %
000000ea : 05d000ef;   % 184:         jal     printString %
000000eb : 0fc10517;   % 186:         la  a0, Addrs %
000000ec : 44650513;   % 186:  %
000000ed : 0880006f;   % 187:         j   End_utval %
000000ee : 00600293;   % 190: End_Cause6: li  t0, 6 %
000000ef : 03a29663;   % 191:         bne     t0, s10, End_Cause7 %
000000f0 : 0fc10517;   % 192:         la  a0, Cause6 %
000000f1 : 3cf50513;   % 192:  %
000000f2 : 00000593;   % 193:         li  a1, 0 %
000000f3 : 00100613;   % 194:         li  a2, 1 %
000000f4 : 0000c6b7;   % 195:         li  a3, 0x0000c0ff %
000000f5 : 0ff68693;   % 195:  %
000000f6 : 02d000ef;   % 196:         jal     printString %
000000f7 : 0fc10517;   % 198:         la  a0, Addrs %
000000f8 : 41650513;   % 198:  %
000000f9 : 0580006f;   % 199:         j   End_utval %
000000fa : 00700293;   % 202: End_Cause7: li  t0, 7 %
000000fb : 03a29663;   % 203:         bne     t0, s10, End_CauseD %
000000fc : 0fc10517;   % 204:         la  a0, Cause7 %
000000fd : 3c250513;   % 204:  %
000000fe : 00000593;   % 205:         li  a1, 0 %
000000ff : 00100613;   % 206:         li  a2, 1 %
00000100 : 0000c6b7;   % 207:         li  a3, 0x0000c0ff %
00000101 : 0ff68693;   % 207:  %
00000102 : 7fc000ef;   % 208:         jal     printString %
00000103 : 0fc10517;   % 210:         la  a0, Addrs %
00000104 : 3e650513;   % 210:  %
00000105 : 0280006f;   % 211:         j   End_utval %
00000106 : 0fc10517;   % 214: End_CauseD:     la  a0, CauseD %
00000107 : 3b750513;   % 214:  %
00000108 : 00000593;   % 215:         li  a1, 0 %
00000109 : 00100613;   % 216:         li  a2, 1 %
0000010a : 0000c6b7;   % 217:         li  a3, 0x0000c0ff %
0000010b : 0ff68693;   % 217:  %
0000010c : 7d4000ef;   % 218:         jal     printString %
0000010d : 0fc10517;   % 220:         la  a0, Addrs %
0000010e : 3be50513;   % 220:  %
0000010f : 00000593;   % 223: End_utval:  li  a1, 0 %
00000110 : 01800613;   % 224:         li  a2, 24 %
00000111 : 0000c6b7;   % 225:         li  a3, 0x000c0ff %
00000112 : 0ff68693;   % 225:  %
00000113 : 7b8000ef;   % 226:         jal printString %
00000114 : 01b00533;   % 228:         mv  a0, s11 %
00000115 : 03800593;   % 229:         li  a1, 56 %
00000116 : 01800613;   % 230:         li  a2, 24 %
00000117 : 0000c6b7;   % 231:         li  a3, 0x0000c0ff %
00000118 : 0ff68693;   % 231:  %
00000119 : 72c000ef;   % 232:         jal     printHex %
0000011a : 0fc10517;   % 235: End_uepc:   la  a0, PC      # Imprime o pc em que a exce��o ocorreu %
0000011b : 38550513;   % 235:  %
0000011c : 00000593;   % 236:         li  a1, 0 %
0000011d : 00c00613;   % 237:         li  a2, 12 %
0000011e : 0000c6b7;   % 238:         li  a3, 0x000c0ff %
0000011f : 0ff68693;   % 238:  %
00000120 : 784000ef;   % 239:         jal     printString %
00000121 : 04102573;   % 241:         csrr    a0, uepc    # Le uepc %
00000122 : 01c00593;   % 242:         li  a1, 28 %
00000123 : 00c00613;   % 243:         li  a2, 12 %
00000124 : 0000c6b7;   % 244:         li  a3, 0x0000c0ff %
00000125 : 0ff68693;   % 244:  %
00000126 : 6f8000ef;   % 245:         jal     printHex %
00000127 : 24c0006f;   % 247:         j goToExit      # encerra execu��o %
00000128 : ef810113;   % 254: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
00000129 : 00112023;   % 255:     sw     x1,    0(sp) %
0000012a : 00212223;   % 256:     sw     x2,    4(sp) %
0000012b : 00312423;   % 257:     sw     x3,    8(sp) %
0000012c : 00412623;   % 258:     sw     x4,   12(sp) %
0000012d : 00512823;   % 259:     sw     x5,   16(sp) %
0000012e : 00612a23;   % 260:     sw     x6,   20(sp) %
0000012f : 00712c23;   % 261:     sw     x7,   24(sp) %
00000130 : 00812e23;   % 262:     sw     x8,   28(sp) %
00000131 : 02912023;   % 263:     sw     x9,   32(sp) %
00000132 : 02a12223;   % 264:     sw     x10,  36(sp) %
00000133 : 02b12423;   % 265:     sw     x11,  40(sp) %
00000134 : 02c12623;   % 266:     sw     x12,  44(sp) %
00000135 : 02d12823;   % 267:     sw     x13,  48(sp) %
00000136 : 02e12a23;   % 268:     sw     x14,  52(sp) %
00000137 : 02f12c23;   % 269:     sw     x15,  56(sp) %
00000138 : 03012e23;   % 270:     sw     x16,  60(sp) %
00000139 : 05112023;   % 271:     sw     x17,  64(sp) %
0000013a : 05212223;   % 272:     sw     x18,  68(sp) %
0000013b : 05312423;   % 273:     sw     x19,  72(sp) %
0000013c : 05412623;   % 274:     sw     x20,  76(sp) %
0000013d : 05512823;   % 275:     sw     x21,  80(sp) %
0000013e : 05612a23;   % 276:     sw     x22,  84(sp) %
0000013f : 05712c23;   % 277:     sw     x23,  88(sp) %
00000140 : 05812e23;   % 278:     sw     x24,  92(sp) %
00000141 : 07912023;   % 279:     sw     x25,  96(sp) %
00000142 : 07a12223;   % 280:     sw     x26, 100(sp) %
00000143 : 07b12423;   % 281:     sw     x27, 104(sp) %
00000144 : 07c12623;   % 282:     sw     x28, 108(sp) %
00000145 : 07d12823;   % 283:     sw     x29, 112(sp) %
00000146 : 07e12a23;   % 284:     sw     x30, 116(sp) %
00000147 : 07f12c23;   % 285:     sw     x31, 120(sp) %
00000148 : 30102c73;   % 286: <22> csrr s8, misa %
00000149 : 020c7c13;   % 286: <23> andi s8, s8, 0x020 %
0000014a : 080c0263;   % 286: <24> beqz s8, ecallException.pula %
0000014b : 06012e27;   % 287:     fsw    f0,  124(sp) %
0000014c : 08112027;   % 288:     fsw    f1,  128(sp) %
0000014d : 08212227;   % 289:     fsw    f2,  132(sp) %
0000014e : 08312427;   % 290:     fsw    f3,  136(sp) %
0000014f : 08412627;   % 291:     fsw    f4,  140(sp) %
00000150 : 08512827;   % 292:     fsw    f5,  144(sp) %
00000151 : 08612a27;   % 293:     fsw    f6,  148(sp) %
00000152 : 08712c27;   % 294:     fsw    f7,  152(sp) %
00000153 : 08812e27;   % 295:     fsw    f8,  156(sp) %
00000154 : 0a912027;   % 296:     fsw    f9,  160(sp) %
00000155 : 0aa12227;   % 297:     fsw    f10, 164(sp) %
00000156 : 0ab12427;   % 298:     fsw    f11, 168(sp) %
00000157 : 0ac12627;   % 299:     fsw    f12, 172(sp) %
00000158 : 0ad12827;   % 300:     fsw    f13, 176(sp) %
00000159 : 0ae12a27;   % 301:     fsw    f14, 180(sp) %
0000015a : 0af12c27;   % 302:     fsw    f15, 184(sp) %
0000015b : 0b012e27;   % 303:     fsw    f16, 188(sp) %
0000015c : 0d112027;   % 304:     fsw    f17, 192(sp) %
0000015d : 0d212227;   % 305:     fsw    f18, 196(sp) %
0000015e : 0d312427;   % 306:     fsw    f19, 200(sp) %
0000015f : 0d412627;   % 307:     fsw    f20, 204(sp) %
00000160 : 0d512827;   % 308:     fsw    f21, 208(sp) %
00000161 : 0d612a27;   % 309:     fsw    f22, 212(sp) %
00000162 : 0d712c27;   % 310:     fsw    f23, 216(sp) %
00000163 : 0d812e27;   % 311:     fsw    f24, 220(sp) %
00000164 : 0f912027;   % 312:     fsw    f25, 224(sp) %
00000165 : 0fa12227;   % 313:     fsw    f26, 228(sp) %
00000166 : 0fb12427;   % 314:     fsw    f27, 232(sp) %
00000167 : 0fc12627;   % 315:     fsw    f28, 236(sp) %
00000168 : 0fd12827;   % 316:     fsw    f29, 240(sp) %
00000169 : 0fe12a27;   % 317:     fsw    f30, 244(sp) %
0000016a : 0ff12c27;   % 318:     fsw    f31, 248(sp) %
0000016b : 000002b3;   % 321:     add     t0, zero, zero %
0000016c : 00000333;   % 322:     add     t1, zero, zero %
0000016d : 000003b3;   % 323:     add     t2, zero, zero %
0000016e : 00000e33;   % 324:     add     t3, zero, zero %
0000016f : 00000eb3;   % 325:     add     t4, zero, zero %
00000170 : 00000f33;   % 326:     add     t5, zero, zero %
00000171 : 00000fb3;   % 327:     add     t6, zero, zero %
00000172 : 00a00293;   % 332:     addi    t0, zero, 10 %
00000173 : 11128e63;   % 333:     beq     t0, a7, goToExit          # ecall exit %
00000174 : 06e00293;   % 334:     addi    t0, zero, 110 %
00000175 : 11128a63;   % 335:     beq     t0, a7, goToExit          # ecall exit %
00000176 : 00100293;   % 337:     addi    t0, zero, 1               # ecall 1 = print int %
00000177 : 13128463;   % 338:     beq     t0, a7, goToPrintInt %
00000178 : 06500293;   % 339:     addi    t0, zero, 101             # ecall 1 = print int %
00000179 : 13128063;   % 340:     beq     t0, a7, goToPrintInt %
0000017a : 00200293;   % 342:     addi    t0, zero, 2               # ecall 2 = print float %
0000017b : 13128863;   % 343:     beq     t0, a7, goToPrintFloat %
0000017c : 06600293;   % 344:     addi    t0, zero, 102             # ecall 2 = print float %
0000017d : 13128463;   % 345:     beq     t0, a7, goToPrintFloat %
0000017e : 00400293;   % 347:     addi    t0, zero, 4               # ecall 4 = print string %
0000017f : 11128863;   % 348:     beq     t0, a7, goToPrintString %
00000180 : 06800293;   % 349:     addi    t0, zero, 104             # ecall 4 = print string %
00000181 : 11128463;   % 350:     beq     t0, a7, goToPrintString %
00000182 : 00500293;   % 352:     addi    t0, zero, 5               # ecall 5 = read int %
00000183 : 13128663;   % 353:     beq     t0, a7, goToReadInt %
00000184 : 06900293;   % 354:     addi    t0, zero, 105             # ecall 5 = read int %
00000185 : 13128263;   % 355:     beq     t0, a7, goToReadInt %
00000186 : 00600293;   % 357:     addi    t0, zero, 6               # ecall 6 = read float %
00000187 : 13128663;   % 358:     beq     t0, a7, goToReadFloat %
00000188 : 06a00293;   % 359:     addi    t0, zero, 106             # ecall 6 = read float %
00000189 : 13128263;   % 360:     beq     t0, a7, goToReadFloat %
0000018a : 00800293;   % 362:     addi    t0, zero, 8               # ecall 8 = read string %
0000018b : 11128a63;   % 363:     beq     t0, a7, goToReadString %
0000018c : 06c00293;   % 364:     addi    t0, zero, 108             # ecall 8 = read string %
0000018d : 11128663;   % 365:     beq     t0, a7, goToReadString %
0000018e : 00b00293;   % 367:     addi    t0, zero, 11              # ecall 11 = print char %
0000018f : 0d128c63;   % 368:     beq     t0, a7, goToPrintChar %
00000190 : 06f00293;   % 369:     addi    t0, zero, 111             # ecall 11 = print char %
00000191 : 0d128863;   % 370:     beq     t0, a7, goToPrintChar %
00000192 : 00c00293;   % 372:     addi    t0, zero, 12              # ecall 12 = read char %
00000193 : 0f128263;   % 373:     beq     t0, a7, goToReadChar %
00000194 : 07000293;   % 374:     addi    t0, zero, 112             # ecall 12 = read char %
00000195 : 0d128e63;   % 375:     beq     t0, a7, goToReadChar %
00000196 : 01e00293;   % 377:     addi    t0, zero, 30              # ecall 30 = time %
00000197 : 13128063;   % 378:     beq     t0, a7, goToTime %
00000198 : 08200293;   % 379:     addi    t0, zero, 130             # ecall 30 = time %
00000199 : 11128c63;   % 380:     beq     t0, a7, goToTime %
0000019a : 02000293;   % 382:     addi    t0, zero, 32              # ecall 32 = sleep %
0000019b : 11128c63;   % 383:     beq     t0, a7, goToSleep %
0000019c : 08400293;   % 384:     addi    t0, zero, 132             # ecall 32 = sleep %
0000019d : 11128863;   % 385:     beq     t0, a7, goToSleep %
0000019e : 02900293;   % 387:     addi    t0, zero, 41              # ecall 41 = random %
0000019f : 11128863;   % 388:     beq     t0, a7, goToRandom %
000001a0 : 08d00293;   % 389:     addi    t0, zero, 141             # ecall 41 = random %
000001a1 : 11128463;   % 390:     beq     t0, a7, goToRandom %
000001a2 : 02200293;   % 392:     addi    t0, zero, 34            # ecall 34 = print hex %
000001a3 : 0d128863;   % 393:     beq     t0, a7, goToPrintHex %
000001a4 : 08600293;   % 394:     addi    t0, zero, 134       # ecall 34 = print hex %
000001a5 : 0d128463;   % 395:     beq     t0, a7, goToPrintHex %
000001a6 : 01f00293;   % 397:     addi    t0, zero, 31              # ecall 31 = MIDI out %
000001a7 : 0d128863;   % 398:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
000001a8 : 08300293;   % 399:     addi    t0, zero, 131             # ecall 31 = MIDI out %
000001a9 : 0d128463;   % 400:     beq     t0, a7, goToMidiOut %
000001aa : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
000001ab : 0d128463;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
000001ac : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
000001ad : 0d128063;   % 405:     beq     t0, a7, goToMidiOutSync %
000001ae : 03000293;   % 407:     addi    t0, zero, 48              # ecall 48 = CLS %
000001af : 0d128c63;   % 408:     beq     t0, a7, goToCLS %
000001b0 : 09400293;   % 409:     addi    t0, zero, 148              # ecall 48 = CLS %
000001b1 : 0d128863;   % 410:     beq     t0, a7, goToCLS %
000001b2 : 02f00293;   % 412:     addi    t0, zero, 47              # ecall 47 = DrawLine %
000001b3 : 0d128863;   % 413:     beq     t0, a7, goToBRES %
000001b4 : 09300293;   % 414:     addi    t0, zero, 147              # ecall 47 = DrawLine %
000001b5 : 0d128463;   % 415:     beq     t0, a7, goToBRES %
000001b6 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
000001b7 : 09128463;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
000001b8 : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
000001b9 : 09128063;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
000001ba : 10008c37;   % 425: <9> li s8, 0x10008000 # carrega tp %
000001bb : 000c0c13;   % 425:  %
000001bc : 01819663;   % 425: <10> bne gp, s8, goToExitDE2    # Na DE1 gp = 0 ! N�o tem segmento .extern %
000001bd : 00a00893;   % 426:             li  a7, 10          # chama o ecall normal do Rars %
000001be : 00000073;   % 427:             ecall               # exit ecall %
000001bf : 00100073;   % 428:     goToExitDE2:    ebreak     # trava o processador : N�o tem sistema operacional! %
000001c0 : ffdff06f;   % 429:             j       goToExitDE2 %
000001c1 : 210000ef;   % 431:     goToPrintInt:   jal     printInt                # chama printInt %
000001c2 : 09c0006f;   % 432:             j       endEcall %
000001c3 : 4f8000ef;   % 434:     goToPrintString: jal     printString            # chama printString %
000001c4 : 0940006f;   % 435:              j       endEcall %
000001c5 : 538000ef;   % 437:     goToPrintChar:  jal     printChar       # chama printChar %
000001c6 : 08c0006f;   % 438:             j       endEcall %
000001c7 : 30102c73;   % 440: <22> csrr s8, misa %
000001c8 : 020c7c13;   % 440: <23> andi s8, s8, 0x020 %
000001c9 : 180c0663;   % 440: <24> beqz s8, NaoExisteEcall %
000001ca : 1a9000ef;   % 441:             jal     printFloat      # chama printFloat %
000001cb : 0780006f;   % 442:             j       endEcall %
000001cc : 658000ef;   % 444:     goToReadChar:   jal     readChar                # chama readChar %
000001cd : 0700006f;   % 445:             j       endEcall %
000001ce : 780000ef;   % 447:     goToReadInt:    jal     readInt                 # chama readInt %
000001cf : 0680006f;   % 448:             j       endEcall %
000001d0 : 6e8000ef;   % 450:     goToReadString: jal     readString              # chama readString %
000001d1 : 0600006f;   % 451:             j       endEcall %
000001d2 : 30102c73;   % 453: <22> csrr s8, misa %
000001d3 : 020c7c13;   % 453: <23> andi s8, s8, 0x020 %
000001d4 : 160c0063;   % 453: <24> beqz s8, NaoExisteEcall %
000001d5 : 381000ef;   % 454:             jal     readFloat               # chama readFloat %
000001d6 : 04c0006f;   % 455:             j       endEcall %
000001d7 : 434000ef;   % 457:     goToPrintHex:   jal     printHex                # chama printHex %
000001d8 : 0440006f;   % 458:             j       endEcall %
000001d9 : 064010ef;   % 460:     goToPrintIntUnsigned:   jal printIntUnsigned    # chama Print Unsigned Int %
000001da : 03c0006f;   % 461:                 j   endEcall %
000001db : 05d000ef;   % 463:     goToMidiOut:    jal     midiOut                 # chama MIDIout %
000001dc : 0340006f;   % 464:             j       endEcall %
000001dd : 0cd000ef;   % 466:     goToMidiOutSync: jal     midiOutSync        # chama MIDIoutSync %
000001de : 02c0006f;   % 467:              j       endEcall %
000001df : 5bd000ef;   % 469:     goToTime:   jal     Time                    # chama time %
000001e0 : 0240006f;   % 470:             j       endEcall %
000001e1 : 5d9000ef;   % 472:     goToSleep:  jal     Sleep                   # chama sleep %
000001e2 : 01c0006f;   % 473:             j       endEcall %
000001e3 : 5fd000ef;   % 475:     goToRandom: jal     Random                  # chama random %
000001e4 : 0140006f;   % 476:             j       endEcall %
000001e5 : 61d000ef;   % 478:     goToCLS:    jal     clsCLS                  # chama CLS %
000001e6 : 00c0006f;   % 479:             j       endEcall %
000001e7 : 671000ef;   % 481:     goToBRES:   jal     BRESENHAM               # chama BRESENHAM %
000001e8 : 0040006f;   % 482:             j       endEcall %
000001e9 : 00012083;   % 486: endEcall:   lw  x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
000001ea : 00412103;   % 487:         lw  x2,   4(sp) %
000001eb : 00812183;   % 488:         lw  x3,   8(sp) %
000001ec : 00c12203;   % 489:         lw  x4,  12(sp) %
000001ed : 01012283;   % 490:         lw  x5,  16(sp) %
000001ee : 01412303;   % 491:         lw  x6,  20(sp) %
000001ef : 01812383;   % 492:         lw  x7,  24(sp) %
000001f0 : 01c12403;   % 493:         lw  x8,  28(sp) %
000001f1 : 02012483;   % 494:         lw  x9,  32(sp) %
000001f2 : 02c12603;   % 497:         lw     x12, 44(sp) %
000001f3 : 03012683;   % 498:         lw     x13, 48(sp) %
000001f4 : 03412703;   % 499:         lw     x14, 52(sp) %
000001f5 : 03812783;   % 500:         lw     x15, 56(sp) %
000001f6 : 03c12803;   % 501:         lw     x16, 60(sp) %
000001f7 : 04012883;   % 502:         lw     x17, 64(sp) %
000001f8 : 04412903;   % 503:         lw     x18, 68(sp) %
000001f9 : 04812983;   % 504:         lw     x19, 72(sp) %
000001fa : 04c12a03;   % 505:         lw     x20, 76(sp) %
000001fb : 05012a83;   % 506:         lw     x21, 80(sp) %
000001fc : 05412b03;   % 507:         lw     x22, 84(sp) %
000001fd : 05812b83;   % 508:         lw     x23, 88(sp) %
000001fe : 05c12c03;   % 509:         lw     x24, 92(sp) %
000001ff : 06012c83;   % 510:         lw     x25, 96(sp) %
00000200 : 06412d03;   % 511:         lw     x26, 100(sp) %
00000201 : 06812d83;   % 512:         lw     x27, 104(sp) %
00000202 : 06c12e03;   % 513:         lw     x28, 108(sp) %
00000203 : 07012e83;   % 514:         lw     x29, 112(sp) %
00000204 : 07412f03;   % 515:         lw     x30, 116(sp) %
00000205 : 07812f83;   % 516:         lw     x31, 120(sp) %
00000206 : 30102c73;   % 517: <22> csrr s8, misa %
00000207 : 020c7c13;   % 517: <23> andi s8, s8, 0x020 %
00000208 : 060c0e63;   % 517: <24> beqz s8, endEcall.pula %
00000209 : 07c12007;   % 518:         flw    f0,  124(sp) %
0000020a : 08012087;   % 519:         flw    f1,  128(sp) %
0000020b : 08412107;   % 520:         flw    f2,  132(sp) %
0000020c : 08812187;   % 521:         flw    f3,  136(sp) %
0000020d : 08c12207;   % 522:         flw    f4,  140(sp) %
0000020e : 09012287;   % 523:         flw    f5,  144(sp) %
0000020f : 09412307;   % 524:         flw    f6,  148(sp) %
00000210 : 09812387;   % 525:         flw    f7,  152(sp) %
00000211 : 09c12407;   % 526:         flw    f8,  156(sp) %
00000212 : 0a012487;   % 527:         flw    f9,  160(sp) %
00000213 : 0ac12607;   % 530:         flw    f12, 172(sp) %
00000214 : 0b012687;   % 531:         flw    f13, 176(sp) %
00000215 : 0b412707;   % 532:         flw    f14, 180(sp) %
00000216 : 0b812787;   % 533:         flw    f15, 184(sp) %
00000217 : 0bc12807;   % 534:         flw    f16, 188(sp) %
00000218 : 0c012887;   % 535:         flw    f17, 192(sp) %
00000219 : 0c412907;   % 536:         flw    f18, 196(sp) %
0000021a : 0c812987;   % 537:         flw    f19, 200(sp) %
0000021b : 0cc12a07;   % 538:         flw    f20, 204(sp) %
0000021c : 0d012a87;   % 539:         flw    f21, 208(sp) %
0000021d : 0d412b07;   % 540:         flw    f22, 212(sp) %
0000021e : 0d812b87;   % 541:         flw    f23, 216(sp) %
0000021f : 0dc12c07;   % 542:         flw    f24, 220(sp) %
00000220 : 0e012c87;   % 543:         flw    f25, 224(sp) %
00000221 : 0e412d07;   % 544:         flw    f26, 228(sp) %
00000222 : 0e812d87;   % 545:         flw    f27, 232(sp) %
00000223 : 0ec12e07;   % 546:         flw    f28, 236(sp) %
00000224 : 0f012e87;   % 547:         flw    f29, 240(sp) %
00000225 : 0f412f07;   % 548:         flw    f30, 244(sp) %
00000226 : 0f812f87;   % 549:         flw    f31, 248(sp) %
00000227 : 10810113;   % 551: endEcall.pula:  addi    sp, sp, 264 %
00000228 : 04102273;   % 553:         csrr    tp, uepc    # le o valor de EPC salvo no registrador uepc (reg 65) %
00000229 : 00420213;   % 554:         addi    tp, tp, 4   # soma 4 para obter a instrucao seguinte ao ecall %
0000022a : 04121073;   % 555:         csrw    tp, uepc    # coloca no registrador uepc %
0000022b : 00200073;   % 556:         uret            # retorna PC=uepc %
0000022c : 0c000513;   % 564: NaoExisteEcall: addi    a0, zero, 0xc0      ## printa tela de azul %
0000022d : 00000593;   % 565:         addi    a1, zero, 0 %
0000022e : 01100833;   % 566:         mv  a6, a7 %
0000022f : 09400893;   % 567:         addi    a7, zero, 148 %
00000230 : 4f1000ef;   % 568:         jal     clsCLS %
00000231 : 0fc10517;   % 569:         la  a0, CauseE %
00000232 : f1b50513;   % 569:  %
00000233 : 00000593;   % 570:         li  a1, 0 %
00000234 : 00100613;   % 571:         li  a2, 1 %
00000235 : 0000c6b7;   % 572:         li  a3, 0x0000c0ff %
00000236 : 0ff68693;   % 572:  %
00000237 : 328000ef;   % 573:         jal     printString %
00000238 : 01000533;   % 574:         mv  a0, a6 %
00000239 : 06800593;   % 575:         li  a1, 104 %
0000023a : 00100613;   % 576:         li  a2, 1 %
0000023b : 0000c6b7;   % 577:         li  a3, 0x0000c0ff %
0000023c : 0ff68693;   % 577:  %
0000023d : 020000ef;   % 578:         jal     printInt %
0000023e : 04102573;   % 579:         csrr    a0,uepc %
0000023f : 08800593;   % 580:         li  a1, 136 %
00000240 : 00100613;   % 581:         li  a2, 1 %
00000241 : 0000c6b7;   % 582:         li  a3, 0x0000c0ff %
00000242 : 0ff68693;   % 582:  %
00000243 : 284000ef;   % 583:         jal     printHex %
00000244 : dd9ff06f;   % 584:         j   goToExit %
00000245 : ffc10113;   % 596: printInt:   addi    sp, sp, -4          # Aloca espaco %
00000246 : 00112023;   % 597:         sw  ra, 0(sp)           # salva ra %
00000247 : 0fc10297;   % 598:         la  t0, TempBuffer          # carrega o Endereco do Buffer da String %
00000248 : b8428293;   % 598:  %
00000249 : 00055a63;   % 600:         bge     a0, zero, ehposprintInt     # Se eh positvo %
0000024a : 02d00313;   % 601:         li  t1, '-'             # carrega o sinal - %
0000024b : 00628023;   % 602:         sb  t1, 0(t0)           # coloca no buffer %
0000024c : 00128293;   % 603:         addi    t0, t0, 1           # incrementa endereco do buffer %
0000024d : 40a00533;   % 604:         sub     a0, zero, a0            # torna o numero positivo %
0000024e : 00a00393;   % 606: ehposprintInt:  li  t2, 10              # carrega numero 10 %
0000024f : 00000313;   % 607:         li  t1, 0               # carrega numero de digitos com 0 %
00000250 : 30102c73;   % 609: <29> csrr s8, misa %
00000251 : 00cc5c13;   % 609: <30> srli s8, s8, 12 %
00000252 : 001c7c13;   % 609: <31> andi s8, s8, 0x001 %
00000253 : 1e0c1863;   % 609: <32> bnez s8, printInt.pula1 %
00000254 : ff410113;   % 610: <99> addi    sp,sp,-12 %
00000255 : 00a12023;   % 610: <100> sw  a0,0(sp) %
00000256 : 00b12223;   % 610: <101> sw  a1,4(sp) %
00000257 : 00c12423;   % 610: <102> sw  a2,8(sp) %
00000258 : 00a00633;   % 610: <103> mv  a2,a0 %
00000259 : 41f65593;   % 610: <104> srai    a1,a2,31 %
0000025a : 00c00533;   % 610: <105> mv  a0,a2 %
0000025b : 00058463;   % 610: <106> beqz    a1,div10.pula1_M6 %
0000025c : 40c00533;   % 610: <107> neg     a0,a2 %
0000025d : ff010113;   % 610: <65> addi    sp, sp, -16 %
0000025e : 00a12023;   % 610: <66> sw  a0, 0(sp) %
0000025f : 00e12223;   % 610: <67> sw  a4, 4(sp) %
00000260 : 00f12423;   % 610: <68> sw  a5, 8(sp) %
00000261 : 00112623;   % 610: <69> sw  ra, 12(sp) %
00000262 : 00a00533;   % 610: <70> mv  a0, a0 %
00000263 : 00155713;   % 610: <71> srli    a4,a0,1 %
00000264 : 00255793;   % 610: <72> srli    a5,a0,2 %
00000265 : 00f707b3;   % 610: <73> add     a5,a4,a5 %
00000266 : 0047d713;   % 610: <74> srli    a4,a5,4 %
00000267 : 00f70733;   % 610: <75> add     a4,a4,a5 %
00000268 : 00875793;   % 610: <76> srli    a5,a4,8 %
00000269 : 00e78733;   % 610: <77> add     a4,a5,a4 %
0000026a : 01075793;   % 610: <78> srli    a5,a4,16 %
0000026b : 00e787b3;   % 610: <79> add     a5,a5,a4 %
0000026c : 0037d793;   % 610: <80> srli    a5,a5,3 %
0000026d : 00279713;   % 610: <81> slli    a4,a5,2 %
0000026e : 00f70733;   % 610: <82> add     a4,a4,a5 %
0000026f : 00171713;   % 610: <83> slli    a4,a4,1 %
00000270 : 40e50533;   % 610: <84> sub     a0,a0,a4 %
00000271 : 00a53513;   % 610: <85> sltiu   a0,a0,10 %
00000272 : 00154513;   % 610: <86> xori    a0,a0,1 %
00000273 : 00f50533;   % 610: <87> add     a0,a0,a5 %
00000274 : 04051073;   % 610: <88> csrw    a0,uscratch %
00000275 : 00012503;   % 610: <89> lw  a0, 0(sp) %
00000276 : 00412703;   % 610: <90> lw  a4, 4(sp) %
00000277 : 00812783;   % 610: <91> lw  a5, 8(sp) %
00000278 : 00c12083;   % 610: <92> lw  ra, 12(sp) %
00000279 : 01010113;   % 610: <93> addi    sp, sp, 16 %
0000027a : 04002ef3;   % 610: <94> csrr    t4,uscratch %
0000027b : 00058463;   % 610: <109> beqz    a1,div10.pula2_M6 %
0000027c : 41d00eb3;   % 610: <110> neg     t4,t4 %
0000027d : 040e9073;   % 610: <111> div10.pula2_M6:    csrw    t4,uscratch %
0000027e : 00012503;   % 610: <112> lw  a0,0(sp) %
0000027f : 00412583;   % 610: <113> lw  a1,4(sp) %
00000280 : 00812603;   % 610: <114> lw  a2,8(sp) %
00000281 : 00c10113;   % 610: <115> addi    sp,sp,12 %
00000282 : 04002ef3;   % 610: <116> csrr    t4,uscratch %
00000283 : ff010113;   % 611: <145> addi    sp,sp,-16 %
00000284 : 00a12023;   % 611: <146> sw  a0,0(sp) %
00000285 : 00b12223;   % 611: <147> sw  a1,4(sp) %
00000286 : 00c12423;   % 611: <148> sw  a2,8(sp) %
00000287 : 00d12623;   % 611: <149> sw  a3,12(sp) %
00000288 : 00a006b3;   % 611: <151> mv  a3,a0 %
00000289 : 00a00613;   % 611: <152> li  a2,10 %
0000028a : ff410113;   % 611: <99> addi    sp,sp,-12 %
0000028b : 00a12023;   % 611: <100> sw  a0,0(sp) %
0000028c : 00b12223;   % 611: <101> sw  a1,4(sp) %
0000028d : 00c12423;   % 611: <102> sw  a2,8(sp) %
0000028e : 00d00633;   % 611: <103> mv  a2,a3 %
0000028f : 41f65593;   % 611: <104> srai    a1,a2,31 %
00000290 : 00c00533;   % 611: <105> mv  a0,a2 %
00000291 : 00058463;   % 611: <106> beqz    a1,div10.pula1_M9 %
00000292 : 40c00533;   % 611: <107> neg     a0,a2 %
00000293 : ff010113;   % 611: <65> addi    sp, sp, -16 %
00000294 : 00a12023;   % 611: <66> sw  a0, 0(sp) %
00000295 : 00e12223;   % 611: <67> sw  a4, 4(sp) %
00000296 : 00f12423;   % 611: <68> sw  a5, 8(sp) %
00000297 : 00112623;   % 611: <69> sw  ra, 12(sp) %
00000298 : 00a00533;   % 611: <70> mv  a0, a0 %
00000299 : 00155713;   % 611: <71> srli    a4,a0,1 %
0000029a : 00255793;   % 611: <72> srli    a5,a0,2 %
0000029b : 00f707b3;   % 611: <73> add     a5,a4,a5 %
0000029c : 0047d713;   % 611: <74> srli    a4,a5,4 %
0000029d : 00f70733;   % 611: <75> add     a4,a4,a5 %
0000029e : 00875793;   % 611: <76> srli    a5,a4,8 %
0000029f : 00e78733;   % 611: <77> add     a4,a5,a4 %
000002a0 : 01075793;   % 611: <78> srli    a5,a4,16 %
000002a1 : 00e787b3;   % 611: <79> add     a5,a5,a4 %
000002a2 : 0037d793;   % 611: <80> srli    a5,a5,3 %
000002a3 : 00279713;   % 611: <81> slli    a4,a5,2 %
000002a4 : 00f70733;   % 611: <82> add     a4,a4,a5 %
000002a5 : 00171713;   % 611: <83> slli    a4,a4,1 %
000002a6 : 40e50533;   % 611: <84> sub     a0,a0,a4 %
000002a7 : 00a53513;   % 611: <85> sltiu   a0,a0,10 %
000002a8 : 00154513;   % 611: <86> xori    a0,a0,1 %
000002a9 : 00f50533;   % 611: <87> add     a0,a0,a5 %
000002aa : 04051073;   % 611: <88> csrw    a0,uscratch %
000002ab : 00012503;   % 611: <89> lw  a0, 0(sp) %
000002ac : 00412703;   % 611: <90> lw  a4, 4(sp) %
000002ad : 00812783;   % 611: <91> lw  a5, 8(sp) %
000002ae : 00c12083;   % 611: <92> lw  ra, 12(sp) %
000002af : 01010113;   % 611: <93> addi    sp, sp, 16 %
000002b0 : 04002573;   % 611: <94> csrr    a0,uscratch %
000002b1 : 00058463;   % 611: <109> beqz    a1,div10.pula2_M9 %
000002b2 : 40a00533;   % 611: <110> neg     a0,a0 %
000002b3 : 04051073;   % 611: <111> div10.pula2_M9:    csrw    a0,uscratch %
000002b4 : 00012503;   % 611: <112> lw  a0,0(sp) %
000002b5 : 00412583;   % 611: <113> lw  a1,4(sp) %
000002b6 : 00812603;   % 611: <114> lw  a2,8(sp) %
000002b7 : 00c10113;   % 611: <115> addi    sp,sp,12 %
000002b8 : 04002573;   % 611: <116> csrr    a0,uscratch %
000002b9 : ff410113;   % 611: <45> addi    sp, sp, -12 %
000002ba : 00a12023;   % 611: <46> sw  a0, 0(sp) %
000002bb : 00b12223;   % 611: <47> sw  a1, 4(sp) %
000002bc : 00112423;   % 611: <48> sw  ra, 8(sp) %
000002bd : 00a00533;   % 611: <50> mv  a0, a0 %
000002be : 00c005b3;   % 611: <51> mv  a1, a2 %
000002bf : 6ad000ef;   % 611: <52> jal     __mulsi3 %
000002c0 : 04051073;   % 611: <53> csrw    a0,uscratch %
000002c1 : 00012503;   % 611: <55> lw  a0, 0(sp) %
000002c2 : 00412583;   % 611: <56> lw  a1, 4(sp) %
000002c3 : 00812083;   % 611: <57> lw  ra, 8(sp) %
000002c4 : 00c10113;   % 611: <58> addi    sp, sp, 12 %
000002c5 : 040025f3;   % 611: <59> csrr    a1,uscratch %
000002c6 : 40b68e33;   % 611: <155> sub     t3,a3,a1 %
000002c7 : 040e1073;   % 611: <157> csrw    t3,uscratch %
000002c8 : 00012503;   % 611: <158> lw  a0,0(sp) %
000002c9 : 00412583;   % 611: <159> lw  a1,4(sp) %
000002ca : 00812603;   % 611: <160> lw  a2,8(sp) %
000002cb : 00c12683;   % 611: <161> lw  a3,12(sp) %
000002cc : 01010113;   % 611: <162> addi    sp,sp,16 %
000002cd : 04002e73;   % 611: <163> csrr    t3,uscratch %
000002ce : 00c0006f;   % 612:         j   printInt.pula1d %
000002cf : 02754eb3;   % 613: printInt.pula1: div     t4, a0, t2          # divide por 10 (quociente) %
000002d0 : 02756e33;   % 614:         rem     t3, a0, t2          # resto %
000002d1 : ffc10113;   % 615: printInt.pula1d:addi    sp, sp, -4          # aloca espaco na pilha %
000002d2 : 01c12023;   % 616:         sw  t3, 0(sp)           # coloca resto na pilha %
000002d3 : 01d00533;   % 617:         mv  a0, t4              # atualiza o numero com o quociente %
000002d4 : 00130313;   % 618:         addi    t1, t1, 1           # incrementa o contador de digitos %
000002d5 : de0516e3;   % 619:         bne     a0, zero, loop1printInt     # verifica se o numero eh zero %
000002d6 : 00012383;   % 621: loop2printInt:  lw  t2, 0(sp)           # le digito da pilha %
000002d7 : 00410113;   % 622:         addi    sp, sp, 4           # libera espaco %
000002d8 : 03038393;   % 623:         addi    t2, t2, 48          # converte o digito para ascii %
000002d9 : 00728023;   % 624:         sb  t2, 0(t0)           # coloca caractere no buffer %
000002da : 00128293;   % 625:         addi    t0, t0, 1           # incrementa endereco do buffer %
000002db : fff30313;   % 626:         addi    t1, t1, -1          # decrementa contador de digitos %
000002dc : fe0314e3;   % 627:         bne     t1, zero, loop2printInt     # eh o ultimo? %
000002dd : 00028023;   % 628:         sb  zero, 0(t0)         # insere \NULL na string %
000002de : 0fc10517;   % 630:         la  a0, TempBuffer          # Endereco do buffer da srting %
000002df : 92850513;   % 630:  %
000002e0 : 084000ef;   % 631:         jal     printString         # chama o print string %
000002e1 : 00012083;   % 633:         lw  ra, 0(sp)           # recupera a %
000002e2 : 00410113;   % 634:         addi    sp, sp, 4           # libera espaco %
000002e3 : 00008067;   % 635: fimprintInt:    ret                 # retorna %
000002e4 : ffc10113;   % 647: printHex:   addi    sp, sp, -4          # aloca espaco %
000002e5 : 00112023;   % 648:             sw      ra, 0(sp)       # salva ra %
000002e6 : 00a002b3;   % 649:         mv  t0, a0          # Inteiro de 32 bits a ser impresso em Hexa %
000002e7 : 0fc10317;   % 650:         la  t1, TabelaHexASCII  # endereco da tabela HEX->ASCII %
000002e8 : b0430313;   % 650:  %
000002e9 : 0fc10397;   % 651:         la  t2, TempBuffer      # onde a string sera montada %
000002ea : 8fc38393;   % 651:  %
000002eb : 03000e13;   % 653:         li  t3,'0'          # Caractere '0' %
000002ec : 01c38023;   % 654:         sb  t3,0(t2)        # Escreve '0' no Buffer da String %
000002ed : 07800e13;   % 655:         li  t3,'x'          # Caractere 'x' %
000002ee : 01c380a3;   % 656:         sb  t3,1(t2)        # Escreve 'x' no Buffer da String %
000002ef : 00238393;   % 657:         addi    t2,t2,2         # novo endereco inicial da string %
000002f0 : 01c00e13;   % 659:         li  t3, 28          # contador de nibble   inicio = 28 %
000002f1 : 020e4263;   % 660: loopprintHex:   blt     t3, zero, fimloopprintHex   # terminou? t3<0? %
000002f2 : 01c2deb3;   % 661:         srl     t4, t0, t3      # desloca o nibble para direita %
000002f3 : 00fefe93;   % 662:         andi    t4, t4, 0x000F      # mascara o nibble %
000002f4 : 01d30eb3;   % 663:         add     t4, t1, t4      # endereco do ascii do nibble %
000002f5 : 000e8e83;   % 664:         lb  t4, 0(t4)       # le ascii do nibble %
000002f6 : 01d38023;   % 665:         sb  t4, 0(t2)       # armazena o ascii do nibble no buffer da string %
000002f7 : 00138393;   % 666:         addi    t2, t2, 1       # incrementa o endereco do buffer %
000002f8 : ffce0e13;   % 667:         addi    t3, t3, -4      # decrementa o numero do nibble %
000002f9 : fe1ff06f;   % 668:         j   loopprintHex %
000002fa : 00038023;   % 670: fimloopprintHex: sb     zero,0(t2)      # grava \null na string %
000002fb : 0fc10517;   % 671:         la  a0, TempBuffer      # Argumento do print String %
000002fc : 8b450513;   % 671:  %
000002fd : 010000ef;   % 672:             jal printString     # Chama o print string %
000002fe : 00012083;   % 674:         lw  ra, 0(sp)       # recupera ra %
000002ff : 00410113;   % 675:         addi    sp, sp, 4       # libera espaco %
00000300 : 00008067;   % 676: fimprintHex:    ret             # retorna %
00000301 : ff810113;   % 687: printString:    addi    sp, sp, -8          # aloca espaco %
00000302 : 00112023;   % 688:             sw  ra, 0(sp)           # salva ra %
00000303 : 00812223;   % 689:             sw  s0, 4(sp)           # salva s0 %
00000304 : 00a00433;   % 690:             mv  s0, a0                      # s0 = endereco do caractere na string %
00000305 : 00040503;   % 692: loopprintString:lb  a0, 0(s0)                   # le em a0 o caracter a ser impresso %
00000306 : 02050263;   % 694:             beq     a0, zero, fimloopprintString    # string ASCIIZ termina com NULL %
00000307 : 030000ef;   % 696:             jal     printChar               # imprime char %
00000308 : 00858593;   % 698:             addi    a1, a1, 8                   # incrementa a coluna %
00000309 : 13900f93;   % 699:             li  t6, 313 %
0000030a : 01f5c663;   % 700:             blt a1, t6, NaoPulaLinha            # se ainda tiver lugar na linha %
0000030b : 00860613;   % 701:             addi    a2, a2, 8                   # incrementa a linha %
0000030c : 000005b3;   % 702:             mv      a1, zero            # volta a coluna zero %
0000030d : 00140413;   % 704: NaoPulaLinha:   addi    s0, s0, 1           # proximo caractere %
0000030e : fddff06f;   % 705:             j       loopprintString             # volta ao loop %
0000030f : 00012083;   % 707: fimloopprintString: lw      ra, 0(sp)           # recupera ra %
00000310 : 00012403;   % 708:             lw  s0, 0(sp)       # recupera s0 original %
00000311 : 00810113;   % 709:                 addi    sp, sp, 8       # libera espaco %
00000312 : 00008067;   % 710: fimprintString: ret                         # retorna %
00000313 : 0ff00e93;   % 732: printChar:  li  t4, 0xFF    # t4 temporario %
00000314 : 008e9e93;   % 733:         slli    t4, t4, 8   # t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
00000315 : 01d6ff33;   % 734:         and     t5, a3, t4      # t5 obtem cor de fundo %
00000316 : 008f5f13;   % 735:             srli    t5, t5, 8   # numero da cor de fundo %
00000317 : 0ff6ff93;   % 736:         andi    t6, a3, 0xFF    # t6 obtem cor de frente %
00000318 : 02000213;   % 738:         li  tp, ' ' %
00000319 : 00454863;   % 739:         blt     a0, tp, printChar.NAOIMPRIMIVEL # ascii menor que 32 nao eh imprimivel %
0000031a : 07e00213;   % 740:         li  tp, '~' %
0000031b : 00a24463;   % 741:         bgt a0, tp, printChar.NAOIMPRIMIVEL # ascii Maior que 126  nao eh imprimivel %
0000031c : 0080006f;   % 742:             j       printChar.IMPRIMIVEL %
0000031d : 02000513;   % 744: printChar.NAOIMPRIMIVEL: li      a0, 32     # Imprime espaco %
0000031e : 14000213;   % 746: printChar.IMPRIMIVEL:   li  tp, 320      # Num colunas 320 %
0000031f : 30102c73;   % 747: <29> csrr s8, misa %
00000320 : 00cc5c13;   % 747: <30> srli s8, s8, 12 %
00000321 : 001c7c13;   % 747: <31> andi s8, s8, 0x001 %
00000322 : 020c1e63;   % 747: <32> bnez s8, printChar.mul1 %
00000323 : ff410113;   % 748: <45> addi    sp, sp, -12 %
00000324 : 00a12023;   % 748: <46> sw  a0, 0(sp) %
00000325 : 00b12223;   % 748: <47> sw  a1, 4(sp) %
00000326 : 00112423;   % 748: <48> sw  ra, 8(sp) %
00000327 : 00400533;   % 748: <50> mv  a0, tp %
00000328 : 00c005b3;   % 748: <51> mv  a1, a2 %
00000329 : 505000ef;   % 748: <52> jal     __mulsi3 %
0000032a : 04051073;   % 748: <53> csrw    a0,uscratch %
0000032b : 00012503;   % 748: <55> lw  a0, 0(sp) %
0000032c : 00412583;   % 748: <56> lw  a1, 4(sp) %
0000032d : 00812083;   % 748: <57> lw  ra, 8(sp) %
0000032e : 00c10113;   % 748: <58> addi    sp, sp, 12 %
0000032f : 04002ef3;   % 748: <59> csrr    t4,uscratch %
00000330 : 0080006f;   % 749:             j printChar.mul1d %
00000331 : 02c20eb3;   % 750: printChar.mul1:     mul     t4, tp, a2          # multiplica a2x320  t4 = coordenada y %
00000332 : 00be8eb3;   % 751: printChar.mul1d:    add     t4, t4, a1                  # t4 = 320*y + x %
00000333 : 008e8e93;   % 752:             addi    t4, t4, 8   # Largura em pixels do caracter %
00000334 : ff000237;   % 753:             li      tp, 0xFF000000              # Endereco de inicio da memoria VGA0 %
00000335 : 00020213;   % 753:  %
00000336 : 00070663;   % 754:             beq     a4, zero, printChar.PULAFRAME       # Verifica qual o frame a ser usado em a4 %
00000337 : ff100237;   % 755:             li      tp, 0xFF100000              # Endereco de inicio da memoria VGA1 %
00000338 : 00020213;   % 755:  %
00000339 : 004e8eb3;   % 756: printChar.PULAFRAME:    add     t4, t4, tp                  # t4 = endereco de impressao do ultimo pixel da primeira linha do char %
0000033a : fe050393;   % 757:             addi    t2, a0, -32                 # indice do char na memoria %
0000033b : 00339393;   % 758:             slli    t2, t2, 3                   # offset em bytes em relacao ao endereco inicial %
0000033c : 0fc0fe17;   % 759:             la      t3, LabelTabChar        # endereco dos caracteres na memoria %
0000033d : 38ce0e13;   % 759:  %
0000033e : 01c383b3;   % 760:             add     t2, t2, t3                  # endereco do caractere na memoria %
0000033f : 0003ae03;   % 761:             lw      t3, 0(t2)                   # carrega a primeira word do char %
00000340 : 00400293;   % 762:             li  t0, 4               # i=4 %
00000341 : 02028e63;   % 764: printChar.forChar1I:    beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
00000342 : 00800313;   % 765:                 addi    t1, zero, 8                 # j = 8 %
00000343 : 02030463;   % 767: printChar.forChar1J:    beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
00000344 : 001e7c93;   % 768:                 andi    s9, t3, 0x001           # primeiro bit do caracter %
00000345 : 001e5e13;   % 769:                 srli    t3, t3, 1                   # retira o primeiro bit %
00000346 : 000c8663;   % 770:                 beq     s9, zero, printChar.printCharPixelbg1   # pixel eh fundo? %
00000347 : 01fe8023;   % 771:                 sb      t6, 0(t4)                   # imprime pixel com cor de frente %
00000348 : 0080006f;   % 772:                 j       printChar.endCharPixel1 %
00000349 : 01ee8023;   % 773: printChar.printCharPixelbg1:    sb      t5, 0(t4)                # imprime pixel com cor de fundo %
0000034a : fff30313;   % 774: printChar.endCharPixel1: addi    t1, t1, -1                 # j-- %
0000034b : fffe8e93;   % 775:                 addi    t4, t4, -1                  # t4 aponta um pixel para a esquerda %
0000034c : fddff06f;   % 776:                 j       printChar.forChar1J     # vollta novo pixel %
0000034d : fff28293;   % 778: printChar.endForChar1J: addi    t0, t0, -1      # i-- %
0000034e : 148e8e93;   % 779:                 addi    t4, t4, 328             # 2**12 + 8 %
0000034f : fc9ff06f;   % 780:                 j       printChar.forChar1I # volta ao loop %
00000350 : 0043ae03;   % 782: printChar.endForChar1I: lw      t3, 4(t2)               # carrega a segunda word do char %
00000351 : 00400293;   % 783:             li  t0, 4           # i = 4 %
00000352 : 02028e63;   % 784: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
00000353 : 00800313;   % 785:                 addi    t1, zero, 8             # j = 8 %
00000354 : 02030463;   % 787: printChar.forChar2J:    beq t1, zero, printChar.endForChar2J # if(j == 0) end for j %
00000355 : 001e7c93;   % 788:                 andi    s9, t3, 0x001               # pixel a ser impresso %
00000356 : 001e5e13;   % 789:                 srli    t3, t3, 1                   # desloca para o proximo %
00000357 : 000c8663;   % 790:                 beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
00000358 : 01fe8023;   % 791:                 sb      t6, 0(t4)           # imprime cor frente %
00000359 : 0080006f;   % 792:                 j       printChar.endCharPixel2     # volta ao loop %
0000035a : 01ee8023;   % 794: printChar.printCharPixelbg2:    sb      t5, 0(t4)       # imprime cor de fundo %
0000035b : fff30313;   % 796: printChar.endCharPixel2:    addi    t1, t1, -1      # j-- %
0000035c : fffe8e93;   % 797:                     addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
0000035d : fddff06f;   % 798:                     j       printChar.forChar2J %
0000035e : fff28293;   % 800: printChar.endForChar2J: addi    t0, t0, -1      # i-- %
0000035f : 148e8e93;   % 801:                 addi    t4, t4, 328     # %
00000360 : fc9ff06f;   % 802:                 j       printChar.forChar2I # volta ao loop %
00000361 : 00008067;   % 804: printChar.endForChar2I: ret             # retorna %
00000362 : 00000013;   % 813: readChar:       nop %
00000363 : ff2002b7;   % 817: readCharKDMMIO:     li  t0, 0xFF200000         # Execucao com Polling do KD MMIO %
00000364 : 00028293;   % 817:  %
00000365 : 0002a503;   % 819: loopReadCharKDMMIO:     lw      a0, 0(t0)               # le o bit de flag do teclado %
00000366 : 00157513;   % 820:             andi    a0, a0, 0x0001          # mascara bit 0 %
00000367 : fe050ce3;   % 821:             beqz    a0, loopReadCharKDMMIO      # testa se uma tecla foi pressionada %
00000368 : 0042a503;   % 822:             lw  a0, 4(t0)           # le o ascii da tecla pressionada %
00000369 : 0800006f;   % 823:             j fimreadChar               # fim Read Char %
0000036a : ff2002b7;   % 830: readCharDE2:    li      t0, 0xFF200100          # Endereco buffer0 %
0000036b : 10028293;   % 830:  %
0000036c : 0002a303;   % 831:             lw      t1, 0(t0)               # conteudo inicial do buffer %
0000036d : 0002a383;   % 833: loopReadChar:   lw      t2, 0(t0)                   # le buffer teclado %
0000036e : 00639663;   % 834:         bne     t2, t1, buffermodificadoChar        # testa se o buffer foi modificado %
0000036f : 00700333;   % 836: atualizaBufferChar:  mv t1, t2          # atualiza o buffer com o novo valor %
00000370 : ff5ff06f;   % 837:             j       loopReadChar        # loop de principal de leitura %
00000371 : 0ff00f13;   % 839: buffermodificadoChar:   li t5, 0xFF %
00000372 : 008f1f13;   % 840:     slli    t5, t5, 8           # t5 = 0x0000FF00 %
00000373 : 01e3fe33;   % 841:     and     t3, t2, t5          # mascara o 2o scancode %
00000374 : 0000f237;   % 842:     li  tp, 0x0000F000 %
00000375 : 00020213;   % 842:  %
00000376 : 024e0063;   % 843:     beq     t3, tp, teclasoltaChar      # eh 0xF0 no 2o scancode? tecla foi solta %
00000377 : 0ff00213;   % 844:     li  tp, 0x000000FF %
00000378 : 0043fe33;   % 845:     and t3, t2, tp          # mascara 1o scancode   (essa podemos fazer diretamente) %
00000379 : 01200213;   % 846:     li  tp, 0x00000012 %
0000037a : fc4e1ae3;   % 847:         bne     t3, tp, atualizaBufferChar  # nao eh o SHIFT que esta pressionado ? volta a ler %
0000037b : 0fc0f417;   % 848:     la      s0, LabelScanCodeShift      # se for SHIFT que esta pressionado atualiza o endereco da tabel %
0000037c : 62e40413;   % 848:  %
0000037d : fc9ff06f;   % 849:         j       atualizaBufferChar      # volta a ler %
0000037e : 0ff3fe13;   % 851: teclasoltaChar:     andi t3, t2, 0x00FF     # mascara o 1o scancode %
0000037f : 08000213;   % 852:     li  tp, 0x00000080 %
00000380 : fbc24ee3;   % 853:     bgt t3, tp, atualizaBufferChar      # se o scancode for > 0x80 entao nao eh imprimivel! %
00000381 : 01200213;   % 854:     li  tp, 0x00000012 %
00000382 : 004e1863;   % 855:     bne     t3, tp, naoehshiftChar          # nao foi o shift que foi solto? entao processa %
00000383 : 0fc0f417;   % 856:     la  s0, LabelScanCode           # shift foi solto atualiza o endereco da tabela %
00000384 : 58840413;   % 856:  %
00000385 : fa9ff06f;   % 857:     j   atualizaBufferChar          # volta a ler %
00000386 : 01c40e33;   % 859: naoehshiftChar:     add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
00000387 : 000e0503;   % 860:         lb      a0, 0(t3)               # le o ascii do caracter para a0 %
00000388 : f8050ee3;   % 861:         beq     a0, zero, atualizaBufferChar        # se for caractere nao imprimivel volta a ler %
00000389 : 00008067;   % 863: fimreadChar:    ret         # retorna %
0000038a : ff810113;   % 875: readString:     addi    sp, sp, -8          # reserva espaco na pilha %
0000038b : 00812223;   % 876:         sw  s0, 4(sp)           # salva s0 %
0000038c : 00112023;   % 877:         sw  ra, 0(sp)           # salva ra %
0000038d : 00000693;   % 878:         li  a3, 0               # zera o contador de caracteres digitados %
0000038e : 00a00933;   % 879:         mv  s2, a0              # salva o endereco inicial %
0000038f : 0fc0f417;   % 880:             la      s0, LabelScanCode           # Endereco da tabela de scancode inicial para readChar %
00000390 : 55840413;   % 880:  %
00000391 : 04d58c63;   % 882: loopreadString: beq     a1, a3, fimreadString       # buffer cheio fim %
00000392 : ff810113;   % 884:         addi    sp, sp, -8 %
00000393 : 00112023;   % 885:         sw  ra, 0(sp)           # salva ra %
00000394 : 00a12223;   % 886:         sw  a0, 4(sp)           # salva a0 pois ele sera reescrito em readChar %
00000395 : f35ff0ef;   % 887:         jal     readChar            # le um caracter do teclado (retorno em a0) %
00000396 : 00a00fb3;   % 888:         mv  t6, a0              # t6 eh a letra lida em readChar %
00000397 : 00012083;   % 889:         lw  ra, 0(sp) %
00000398 : 00412503;   % 890:         lw  a0, 4(sp) %
00000399 : 00810113;   % 891:         addi    sp, sp, 8 %
0000039a : 00800213;   % 893:         li  tp, 0x08 %
0000039b : 004f9c63;   % 894:         bne t6, tp, PulaBackSpace       # Se nao for BACKSPACE %
0000039c : fcd00ae3;   % 895:         beq zero, a3, loopreadString    # Se n�o tem nenhum caractere no buffer apenas volta a ler %
0000039d : fff68693;   % 896:         addi    a3, a3, -1          # diminui contador %
0000039e : fff50513;   % 897:         addi    a0, a0, -1          # diminui endereco do buffer %
0000039f : 00050023;   % 898:         sb  zero, 0(a0)         # coloca zero no caractere anterior %
000003a0 : fc5ff06f;   % 899:         j loopreadString %
000003a1 : 00a00213;   % 901: PulaBackSpace:  li  tp, 0x0A %
000003a2 : 004f8a63;   % 902:         beq     t6, tp, fimreadString       # se for tecla ENTER fim %
000003a3 : 01f50023;   % 903:         sb  t6, 0(a0)           # grava no buffer %
000003a4 : 00168693;   % 904:         addi    a3, a3, 1           # incrementa contador %
000003a5 : 00150513;   % 905:         addi    a0, a0, 1           # incrementa endereco no buffer %
000003a6 : fadff06f;   % 906:         j loopreadString            # volta a ler outro caractere %
000003a7 : 00050023;   % 908: fimreadString:  sb  zero, 0(a0)         # grava NULL no buffer %
000003a8 : fff50613;   % 909:         addi    a2, a0, -1          # Para que a2 tenha o endereco do ultimo caractere digitado %
000003a9 : 01200533;   % 910:         mv  a0, s2              # a0 volta a ter o endereco inicial da string %
000003aa : 00012083;   % 911:         lw  ra, 0(sp)           # recupera ra %
000003ab : 00412403;   % 912:         lw  s0, 4(sp)           # recupera s0 %
000003ac : 00810113;   % 913:         addi    sp, sp, 8           # libera espaco %
000003ad : 00008067;   % 914:         ret                 # retorna %
000003ae : ffc10113;   % 923: readInt:    addi    sp,sp,-4        # reserva espaco na pilha %
000003af : 00112023;   % 924:     sw  ra, 0(sp)           # salva ra %
000003b0 : 0fc0f517;   % 925:     la  a0, TempBuffer          # Endereco do buffer de string %
000003b1 : 5e050513;   % 925:  %
000003b2 : 00a00593;   % 926:     li  a1, 10              # numero maximo de digitos %
000003b3 : f5dff0ef;   % 927:     jal     readString          # le uma string de ate 10 digitos, a3 numero de digitos %
000003b4 : 00c002b3;   % 928:     mv  t0, a2              # copia endereco do ultimo digito %
000003b5 : 00a00393;   % 929:     li  t2, 10              # dez %
000003b6 : 00100e13;   % 930:     li  t3, 1               # dezenas, centenas, etc %
000003b7 : 00000533;   % 931:     mv  a0, zero            # zera o numero %
000003b8 : 0c068e63;   % 933: loopReadInt:    beq a3,zero, fimReadInt # Leu todos os digitos %
000003b9 : 00028303;   % 934:     lb  t1, (t0)            # le um digito %
000003ba : 02d00213;   % 935:     li  tp, 0x0000002D %
000003bb : 0c430663;   % 936:     beq     t1, tp, ehnegReadInt        # = '-' %
000003bc : 02b00213;   % 937:     li  tp, 0x0000002B %
000003bd : 0c430463;   % 938:     beq     t1, tp, ehposReadInt        # = '+' %
000003be : 03000213;   % 939:     li  tp, 0x00000030 %
000003bf : 0a434c63;   % 940:     blt     t1, tp, naoehReadInt        # <'0' %
000003c0 : 03900213;   % 941:     li  tp, 0x00000039 %
000003c1 : 0a624863;   % 942:     bgt     t1, tp, naoehReadInt        # >'9' %
000003c2 : fd030313;   % 943:     addi    t1, t1, -48         # transforma ascii em numero %
000003c3 : 30102c73;   % 944: <29> csrr s8, misa %
000003c4 : 00cc5c13;   % 944: <30> srli s8, s8, 12 %
000003c5 : 001c7c13;   % 944: <31> andi s8, s8, 0x001 %
000003c6 : 020c1e63;   % 944: <32> bnez s8, readInt.mul1 %
000003c7 : ff410113;   % 945: <45> addi    sp, sp, -12 %
000003c8 : 00a12023;   % 945: <46> sw  a0, 0(sp) %
000003c9 : 00b12223;   % 945: <47> sw  a1, 4(sp) %
000003ca : 00112423;   % 945: <48> sw  ra, 8(sp) %
000003cb : 00600533;   % 945: <50> mv  a0, t1 %
000003cc : 01c005b3;   % 945: <51> mv  a1, t3 %
000003cd : 275000ef;   % 945: <52> jal     __mulsi3 %
000003ce : 04051073;   % 945: <53> csrw    a0,uscratch %
000003cf : 00012503;   % 945: <55> lw  a0, 0(sp) %
000003d0 : 00412583;   % 945: <56> lw  a1, 4(sp) %
000003d1 : 00812083;   % 945: <57> lw  ra, 8(sp) %
000003d2 : 00c10113;   % 945: <58> addi    sp, sp, 12 %
000003d3 : 04002373;   % 945: <59> csrr    t1,uscratch %
000003d4 : 0080006f;   % 946:     j readInt.mul1d %
000003d5 : 03c30333;   % 947: readInt.mul1:   mul     t1, t1, t3          # multiplica por dezenas/centenas %
000003d6 : 00650533;   % 948: readInt.mul1d:  add     a0, a0, t1          # soma no numero %
000003d7 : 30102c73;   % 949: <29> csrr s8, misa %
000003d8 : 00cc5c13;   % 949: <30> srli s8, s8, 12 %
000003d9 : 001c7c13;   % 949: <31> andi s8, s8, 0x001 %
000003da : 020c1e63;   % 949: <32> bnez s8, readInt.mul2 %
000003db : ff410113;   % 950: <45> addi    sp, sp, -12 %
000003dc : 00a12023;   % 950: <46> sw  a0, 0(sp) %
000003dd : 00b12223;   % 950: <47> sw  a1, 4(sp) %
000003de : 00112423;   % 950: <48> sw  ra, 8(sp) %
000003df : 01c00533;   % 950: <50> mv  a0, t3 %
000003e0 : 007005b3;   % 950: <51> mv  a1, t2 %
000003e1 : 225000ef;   % 950: <52> jal     __mulsi3 %
000003e2 : 04051073;   % 950: <53> csrw    a0,uscratch %
000003e3 : 00012503;   % 950: <55> lw  a0, 0(sp) %
000003e4 : 00412583;   % 950: <56> lw  a1, 4(sp) %
000003e5 : 00812083;   % 950: <57> lw  ra, 8(sp) %
000003e6 : 00c10113;   % 950: <58> addi    sp, sp, 12 %
000003e7 : 04002e73;   % 950: <59> csrr    t3,uscratch %
000003e8 : 0080006f;   % 951:     j readInt.mul2d %
000003e9 : 027e0e33;   % 952: readInt.mul2:   mul     t3, t3, t2          # proxima dezena/centena %
000003ea : fff28293;   % 953: readInt.mul2d:  addi    t0, t0, -1          # busca o digito anterior %
000003eb : fff68693;   % 954:     addi    a3, a3, -1          # reduz o contador de digitos %
000003ec : f31ff06f;   % 955:     j   loopReadInt         # volta para buscar proximo digito %
000003ed : 0080006f;   % 958:         j fimReadInt            # como nao esta implmentado apenas retorna %
000003ee : 40a00533;   % 960: ehnegReadInt:   sub a0,zero,a0          # se for negativo %
000003ef : 00012083;   % 964: fimReadInt: lw  ra, 0(sp)       # recupera ra %
000003f0 : 00410113;   % 965:         addi    sp, sp, 4       # libera espaco %
000003f1 : 00008067;   % 966:         ret             # fim ReadInt %
000003f2 : 10008c37;   % 986: <9> li s8, 0x10008000 # carrega tp %
000003f3 : 000c0c13;   % 986:  %
000003f4 : 01819863;   % 986: <10> bne gp, s8, midiOutDE2    # Na DE1 gp = 0 ! N�o tem segmento .extern %
000003f5 : 01f00893;   % 988:     li a7,31        # Chama o ecall normal %
000003f6 : 00000073;   % 989:     ecall %
000003f7 : 0600006f;   % 990:     j fimmidiOut %
000003f8 : ff2002b7;   % 992: midiOutDE2: li      t0, 0xFF200178 %
000003f9 : 17828293;   % 992:  %
000003fa : 00000333;   % 993:             add     t1, zero, zero %
000003fb : 00f67393;   % 998:         andi    t2, a2, 0x0000000F %
000003fc : 01b39393;   % 999:             slli    t2, t2, 27 %
000003fd : 00736333;   % 1000:             or      t1, t1, t2 %
000003fe : 07f6f393;   % 1003:             andi    t2, a3, 0x0000007F %
000003ff : 01439393;   % 1004:             slli    t2, t2, 20 %
00000400 : 00736333;   % 1005:             or      t1, t1, t2 %
00000401 : 07f57393;   % 1008:             andi    t2, a0, 0x0000007F %
00000402 : 00d39393;   % 1009:             slli    t2, t2, 13 %
00000403 : 00736333;   % 1010:             or      t1, t1, t2 %
00000404 : 1ff00e93;   % 1013:         li  t4, 0x1FF %
00000405 : 004e9e93;   % 1014:         slli    t4, t4, 4 %
00000406 : 00fe8e93;   % 1015:         addi    t4, t4, 0x00F           # t4 = 0x00001FFF %
00000407 : 01d5f3b3;   % 1016:             and     t2, a1, t4 %
00000408 : 00736333;   % 1017:             or      t1, t1, t2 %
00000409 : 0040006f;   % 1020:             j       SintMidOut %
0000040a : 0062a023;   % 1022: SintMidOut: sw  t1, 0(t0) %
0000040b : ff2003b7;   % 1025:                 li      t2, 0xFF20017C %
0000040c : 17c38393;   % 1025:  %
0000040d : 0003ae03;   % 1026: Check_AUD_DACLRCK:      lw      t3, 0(t2) %
0000040e : fe0e0ee3;   % 1027:                 beq     t3, zero, Check_AUD_DACLRCK %
0000040f : 00008067;   % 1029: fimmidiOut:         ret %
00000410 : 10008c37;   % 1047: <9> li s8, 0x10008000 # carrega tp %
00000411 : 000c0c13;   % 1047:  %
00000412 : 01819863;   % 1047: <10> bne gp, s8, midiOutSyncDE2    # Na DE1 gp = 0 ! N�o tem segmento .extern %
00000413 : 02100893;   % 1049:     li a7,33        # Chama o ecall normal %
00000414 : 00000073;   % 1050:     ecall %
00000415 : 0780006f;   % 1051:     j fimmidiOutSync %
00000416 : ff2002b7;   % 1053: midiOutSyncDE2: li      t0, 0xFF200178 %
00000417 : 17828293;   % 1053:  %
00000418 : 00000333;   % 1054:             add     t1, zero, zero %
00000419 : 08000337;   % 1057:             lui     t1, 0x08000 %
0000041a : 00431313;   % 1058:         slli    t1,t1,4 %
0000041b : 00f67393;   % 1061:             andi    t2, a2, 0x00F %
0000041c : 01b39393;   % 1062:             slli    t2, t2, 27 %
0000041d : 00736333;   % 1063:             or      t1, t1, t2 %
0000041e : 07f6f393;   % 1066:             andi    t2, a3, 0x07F %
0000041f : 01439393;   % 1067:             slli    t2, t2, 20 %
00000420 : 00736333;   % 1068:             or      t1, t1, t2 %
00000421 : 07f57393;   % 1071:             andi    t2, a0, 0x07F %
00000422 : 00d39393;   % 1072:             slli    t2, t2, 13 %
00000423 : 00736333;   % 1073:             or      t1, t1, t2 %
00000424 : 1ff00e93;   % 1076:         li  t4, 0x1FF %
00000425 : 004e9e93;   % 1077:         slli    t4, t4, 4 %
00000426 : 00fe8e93;   % 1078:         addi    t4, t4, 0x00F           # t4 = 0x00001FFF %
00000427 : 01d5f3b3;   % 1079:             and     t2, a1, t4 %
00000428 : 00736333;   % 1080:             or      t1, t1, t2 %
00000429 : 0040006f;   % 1083:             j       SintMidOutSync %
0000042a : 0062a023;   % 1085: SintMidOutSync: sw  t1, 0(t0) %
0000042b : ff2003b7;   % 1088:             li      t2, 0xFF20017C %
0000042c : 17c38393;   % 1088:  %
0000042d : ff200eb7;   % 1089:             li      t4, 0xFF200180 %
0000042e : 180e8e93;   % 1089:  %
0000042f : 0003ae03;   % 1091: Check_AUD_DACLRCKSync:  lw      t3, 0(t2) %
00000430 : fe0e0ee3;   % 1092:                 beq     t3, zero, Check_AUD_DACLRCKSync %
00000431 : 000eaf03;   % 1094: Melody:         lw      t5, 0(t4) %
00000432 : fe0f1ee3;   % 1095:             bne     t5, zero, Melody %
00000433 : 00008067;   % 1097: fimmidiOutSync: ret %
00000434 : ffc10113;   % 1107: printFloat: addi    sp, sp, -4 %
00000435 : 00112023;   % 1108:         sw  ra, 0(sp)               # salva ra %
00000436 : 0fc0f417;   % 1109:         la  s0, TempBuffer %
00000437 : 3c840413;   % 1109:  %
00000438 : 02b00293;   % 1112:         li  t0, '+'         # define sinal '+' %
00000439 : e00504d3;   % 1113:         fmv.x.s s1, fa0         # recupera o numero float sem conversao %
0000043a : 01f4d493;   % 1114:         srli    s1, s1, 31      # bit 31(sinal) em bit 0, numero eh negativo s1=1 %
0000043b : 00048463;   % 1115:         beq     s1, zero, ehposprintFloat   # eh positivo s1=0 %
0000043c : 02d00293;   % 1116:         li  t0, '-'             # define sinal '-' %
0000043d : 00540023;   % 1117: ehposprintFloat: sb     t0, 0(s0)           # coloca sinal no buffer %
0000043e : 00140413;   % 1118:         addi    s0, s0, 1           # incrementa o endereco do buffer %
0000043f : e00502d3;   % 1121:          fmv.x.s t0, fa0            # recupera o numero float sem conversao %
00000440 : 7f800337;   % 1122:          lui    t1, 0x7F800 %
00000441 : 0062f2b3;   % 1123:          and    t0, t0, t1              # mascara com 0111 1111 1000 0000 0000 0000... %
00000442 : 00129293;   % 1124:          slli   t0, t0, 1           # tira o sinal do numero %
00000443 : 0182d293;   % 1125:          srli   t0, t0, 24          # recupera o expoente %
00000444 : e0050353;   % 1128:         fmv.x.s t1, fa0             # recupera o numero float sem conversao %
00000445 : 008003b7;   % 1129:         li  t2, 0x007FFFFF          # t2 = 0x007FFFFF %
00000446 : fff38393;   % 1129:  %
00000447 : 00737333;   % 1130:         and     t1, t1, t2          # mascara com 0000 0000 0111 1111 1111... %
00000448 : 14028c63;   % 1132:         beq     t0, zero, ehExp0printFloat  # Expoente = 0 %
00000449 : 0ff00213;   % 1133:         li  tp, 0x000000FF          # TP = 255 %
0000044a : 16428c63;   % 1134:         beq     t0, tp, ehExp255printFloat  # Expoente = 255 %
0000044b : 20a52053;   % 1138:         fabs.s      ft0, fa0        # ft0 recebe o modulo  de x %
0000044c : 00100213;   % 1139:         li      tp, 1 %
0000044d : d00270d3;   % 1140:         fcvt.s.w    ft1, tp         # ft1 recebe o numero 1.0 %
0000044e : 00a00213;   % 1141:         li      tp, 10 %
0000044f : d0027353;   % 1142:         fcvt.s.w    ft6, tp         # ft6 recebe o numero 10.0 %
00000450 : 00200213;   % 1143:         li      tp, 2 %
00000451 : d0027e53;   % 1144:         fcvt.s.w    ft8, tp %
00000452 : 19c0f3d3;   % 1145:         fdiv.s      ft7, ft1, ft8       # ft7 recebe o numero 0.5 %
00000453 : a0101ed3;   % 1147:         flt.s   t4, ft0, ft1        # ft0 < 1.0 ? Se sim, E deve ser negativo %
00000454 : 000e9663;   % 1148:         bnez    t4, menor1printFloat    # se a comparacao deu true (1), pula %
00000455 : 20630153;   % 1149:         fmv.s   ft2, ft6        # ft2  fator de multiplicacao = 10 %
00000456 : 02c0006f;   % 1150:         j   cont2printFloat     # vai para expoente positivo %
00000457 : 1860f153;   % 1151: menor1printFloat: fdiv.s ft2,ft1,ft6        # ft2 fator multiplicativo = 0.1 %
00000458 : 20000253;   % 1154: cont1printFloat:    fmv.s   ft4, ft0            # inicia com o numero x %
00000459 : 201081d3;   % 1155:             fmv.s   ft3, ft1            # contador comeca em 1 %
0000045a : 18227253;   % 1156: loop1printFloat:    fdiv.s  ft4, ft4, ft2           # divide o numero pelo fator multiplicativo %
0000045b : a0120e53;   % 1157:             fle.s   t3, ft4, ft1            # o numero eh > que 1? entao fim %
0000045c : 000e0663;   % 1158:             beq     t3,zero, fimloop1printFloat %
0000045d : 0011f1d3;   % 1159:             fadd.s  ft3, ft3, ft1           # incrementa o contador %
0000045e : ff1ff06f;   % 1160:             j   loop1printFloat         # volta ao loop %
0000045f : 18227253;   % 1162: fimloop1printFloat:     fdiv.s  ft4, ft4, ft2           # ajusta o numero %
00000460 : 0200006f;   % 1163:             j   intprintFloat           # vai para imprimir a parte inteira %
00000461 : 20000253;   % 1166: cont2printFloat:    fmv.s    ft4, ft0           # inicia com o numero x %
00000462 : d00071d3;   % 1167:             fcvt.s.w ft3, zero          # contador comeca em 0 %
00000463 : a0621e53;   % 1168: loop2printFloat:    flt.s    t3, ft4, ft6           # resultado eh < que 10? entao fim %
00000464 : 18227253;   % 1169:             fdiv.s   ft4, ft4, ft2          # divide o numero pelo fator multiplicativo %
00000465 : 000e1663;   % 1170:             bne      t3, zero, intprintFloat %
00000466 : 0011f1d3;   % 1171:             fadd.s   ft3, ft3, ft1          # incrementa o contador %
00000467 : ff1ff06f;   % 1172:             j    loop2printFloat %
00000468 : 10227253;   % 1178: intprintFloat:      fmul.s      ft4, ft4, ft2       # ajusta o numero %
00000469 : 08727253;   % 1179:             fsub.s      ft4, ft4, ft7       # tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
0000046a : c00272d3;   % 1180:             fcvt.w.s    t0, ft4         # coloca floor de ft4 em t0 %
0000046b : 00727253;   % 1181:             fadd.s      ft4, ft4, ft7       # readiciona 0.5 %
0000046c : 00029463;   % 1182:             bnez        t0, pulaeh1print    # para corrigir multiplos inteiros de 10! %
0000046d : 00100293;   % 1183:             li      t0, 1 %
0000046e : 03028293;   % 1184: pulaeh1print:       addi        t0, t0, 48      # converte para ascii %
0000046f : 00540023;   % 1185:             sb      t0, 0(s0)       # coloca no buffer %
00000470 : 00140413;   % 1186:             addi        s0, s0, 1       # incrementta o buffer %
00000471 : 02e00293;   % 1189:             li  t0, '.'             # carrega o '.' %
00000472 : 00540023;   % 1190:             sb  t0, 0(s0)           # coloca no buffer %
00000473 : 00140413;   % 1191:             addi    s0, s0, 1           # incrementa o buffer %
00000474 : 00800313;   % 1194:             li      t1, 8               # contador de digitos  -  8 casas decimais %
00000475 : 04030a63;   % 1195: loopfracprintFloat:     beq         t1, zero, fimfracprintFloat # fim dos digitos? %
00000476 : 08727253;   % 1196:             fsub.s      ft4, ft4, ft7           # tira 0.5 %
00000477 : c0027f53;   % 1197:             fcvt.w.s    t5, ft4             # floor de ft4 %
00000478 : 00727253;   % 1198:             fadd.s      ft4, ft4, ft7           # readiciona 0.5 %
00000479 : d00f72d3;   % 1199:             fcvt.s.w    ft5, t5             # reconverte em float so com a parte inteira %
0000047a : 085272d3;   % 1200:             fsub.s      ft5, ft4, ft5           # parte fracionaria %
0000047b : 1062f2d3;   % 1201:             fmul.s      ft5, ft5, ft6           # mult x 10 %
0000047c : 0872f2d3;   % 1202:             fsub.s      ft5, ft5, ft7           # tira 0.5 %
0000047d : c002f2d3;   % 1203:             fcvt.w.s    t0, ft5             # coloca floor de ft5 em 10 %
0000047e : 03028293;   % 1204:             addi        t0, t0, 48          # converte para ascii %
0000047f : 03000213;   % 1206:             li      tp, 48 %
00000480 : 0042c663;   % 1207:             blt     t0, tp, pulaprtFloat1   # testa se eh menor que '0' %
00000481 : 03900213;   % 1208:             li      tp, 57 %
00000482 : 00525463;   % 1209:             ble     t0, tp, pulaprtFloat2   # testa se eh menor ou igual que '9' %
00000483 : 03000293;   % 1210: pulaprtFloat1:      li      t0, 48          # define como '0' %
00000484 : 00540023;   % 1212: pulaprtFloat2:      sb      t0, 0(s0)           # coloca no buffer %
00000485 : 00140413;   % 1213:             addi        s0, s0, 1           # incrementa endereco %
00000486 : fff30313;   % 1214:             addi        t1, t1, -1          # decrementa contador %
00000487 : 0072f2d3;   % 1215:             fadd.s      ft5, ft5, ft7           # reincrementa 0.5 %
00000488 : 20528253;   % 1216:             fmv.s       ft4, ft5            # coloca o numero em ft4 %
00000489 : fb1ff06f;   % 1217:             j       loopfracprintFloat      # volta ao loop %
0000048a : 04500293;   % 1220: fimfracprintFloat:  li  t0,'E'          # carrega 'E' %
0000048b : 00540023;   % 1221:             sb  t0, 0(s0)       # coloca no buffer %
0000048c : 00140413;   % 1222:             addi    s0, s0, 1       # incrementa endereco %
0000048d : 02b00293;   % 1225:             li  t0, '+'             # carrega '+' %
0000048e : 000e8463;   % 1226:             beqz    t4, expposprintFloat        # nao eh negativo? %
0000048f : 02d00293;   % 1227:             li  t0, '-'             # carrega '-' %
00000490 : 00540023;   % 1228: expposprintFloat:   sb  t0, 0(s0)           # coloca no buffer %
00000491 : 00140413;   % 1229:             addi    s0, s0, 1           #incrementa endereco %
00000492 : 00a00313;   % 1232:             li  t1, 10              # carrega 10 %
00000493 : c001f253;   % 1233:             fcvt.w.s  tp, ft3           # passa ft3 para t0 %
00000494 : 026242b3;   % 1234:             div     t0, tp, t1          # divide por 10 (dezena) %
00000495 : 026263b3;   % 1235:             rem t2, tp, t1          # t0 = quociente, t2 = resto %
00000496 : 03028293;   % 1236:             addi    t0, t0, 48          # converte para ascii %
00000497 : 00540023;   % 1237:             sb  t0, 0(s0)           # coloca no buffer %
00000498 : 03038393;   % 1238:             addi    t2, t2, 48          # converte para ascii %
00000499 : 007400a3;   % 1239:             sb  t2, 1(s0)           # coloca no buffer %
0000049a : 00040123;   % 1240:             sb  zero, 2(s0)         # insere \NULL da string %
0000049b : 0fc0f517;   % 1241:             la  a0, TempBuffer          # endereco do Buffer %
0000049c : 23450513;   % 1241:  %
0000049d : 0500006f;   % 1242:             j   fimprintFloat           # imprime a string %
0000049e : 00030e63;   % 1244: ehExp0printFloat:   beq     t1, zero, eh0printFloat     # Verifica se eh zero %
0000049f : 0fc0f517;   % 1246: ehDesnormprintFloat:    la  a0, NumDesnormP         # string numero desnormalizado positivo %
000004a0 : 43750513;   % 1246:  %
000004a1 : 04048063;   % 1247:             beq     s1, zero, fimprintFloat     # o sinal eh 1? entao eh negativo %
000004a2 : 0fc0f517;   % 1248:             la  a0, NumDesnormN         # string numero desnormalizado negativo %
000004a3 : 43450513;   % 1248:  %
000004a4 : 0340006f;   % 1249:             j   fimprintFloat           # imprime a string %
000004a5 : 0fc0f517;   % 1251: eh0printFloat:      la  a0, NumZero         # string do zero %
000004a6 : 43150513;   % 1251:  %
000004a7 : 0280006f;   % 1252:             j   fimprintFloat           # imprime a string %
000004a8 : 00030863;   % 1254: ehExp255printFloat:     beq     t1, zero, ehInfprintFloat   # se mantissa eh zero entao eh Infinito %
000004a9 : 0fc0f517;   % 1256: ehNaNprintfFloat:   la  a0, NumNaN          # string do NaN %
000004aa : 44050513;   % 1256:  %
000004ab : 0180006f;   % 1257:             j   fimprintFloat           # imprime string %
000004ac : 0fc0f517;   % 1259: ehInfprintFloat:    la  a0, NumInfP         # string do infinito positivo %
000004ad : 42050513;   % 1259:  %
000004ae : 00048663;   % 1260:             beq     s1, zero, fimprintFloat     # o sinal eh 1? entao eh negativo %
000004af : 0fc0f517;   % 1261:             la  a0, NumInfN         # string do infinito negativo %
000004b0 : 41e50513;   % 1261:  %
000004b1 : 941ff0ef;   % 1264: fimprintFloat:      jal     printString         # imprime a string em a0 %
000004b2 : 00012083;   % 1265:             lw  ra, 0(sp)           # recupera ra %
000004b3 : 00410113;   % 1266:             addi    sp, sp, 4           # libera espaco %
000004b4 : 00008067;   % 1267:             ret                 # retorna %
000004b5 : ffc10113;   % 1276: readFloat: addi sp, sp, -4          # aloca espaco %
000004b6 : 00112023;   % 1277:     sw  ra, 0(sp)           # salva ra %
000004b7 : 0fc0f517;   % 1278:     la  a0, TempBuffer          # endereco do FloatBuffer %
000004b8 : 1c450513;   % 1278:  %
000004b9 : 02000593;   % 1279:     li  a1, 32              # numero maximo de caracteres %
000004ba : b41ff0ef;   % 1280:     jal readString          # le string, retorna a2 ultimo endereco e a3 numero de caracteres %
000004bb : 00c00433;   % 1281:     mv  s0, a2              # ultimo endereco da string (antes do \0) %
000004bc : 00d004b3;   % 1282:     mv  s1, a3              # numero de caracteres digitados %
000004bd : 0fc0fb97;   % 1283:     la  s7, TempBuffer          # Endereco do primeiro caractere %
000004be : 1acb8b93;   % 1283:  %
000004bf : 017002b3;   % 1285: lePrimeiroreadFloat:    mv  t0, s7      # Endereco de Inicio %
000004c0 : 00028303;   % 1286:     lb  t1, 0(t0)               # le primeiro caractere %
000004c1 : 06500213;   % 1287:     li  tp, 'e'                 # TP = 101 = 'e' %
000004c2 : 02430863;   % 1288:     beq     t1, tp, insere0AreadFloat       # insere '0' antes %
000004c3 : 04500213;   % 1289:     li  tp, 'E'                 # TP = 69 = 'E' %
000004c4 : 02430463;   % 1290:     beq     t1, tp, insere0AreadFloat       # insere '0' antes %
000004c5 : 02e00213;   % 1291:     li  tp, '.'                 # TP = 46 = '.' %
000004c6 : 02430063;   % 1292:     beq     t1, tp, insere0AreadFloat       #  insere '0' antes %
000004c7 : 02b00213;   % 1293:     li  tp, '+'                 # TP = 43 = '+' %
000004c8 : 00430863;   % 1294:     beq     t1, tp, pulaPrimreadChar        # pula o primeiro caractere %
000004c9 : 02d00213;   % 1295:     li  tp, '-'                 # TP = 45 = '-' %
000004ca : 00430463;   % 1296:     beq     t1, tp, pulaPrimreadChar %
000004cb : 03c0006f;   % 1297:     j leUltimoreadFloat %
000004cc : 001b8b93;   % 1299: pulaPrimreadChar: addi s7,s7,1          # incrementa o endereco inicial %
000004cd : fc9ff06f;   % 1300:           j lePrimeiroreadFloat     # volta a testar o novo primeiro caractere %
000004ce : 008002b3;   % 1302: insere0AreadFloat: mv t0, s0            # endereco do ultimo caractere %
000004cf : 00140413;   % 1303:            addi s0, s0, 1       # desloca o ultimo endereco para o proximo %
000004d0 : 00148493;   % 1304:            addi s1, s1, 1       # incrementa o num. caracteres %
000004d1 : 000400a3;   % 1305:            sb   zero, 1(s0)     # \NULL do final de string %
000004d2 : 01700f33;   % 1306:            mv t5, s7            # primeiro caractere %
000004d3 : 01e28a63;   % 1307: insere0Aloop:      beq  t0, t5, saiinsere0AreadFloat    # chegou no inicio entao fim %
000004d4 : 00028303;   % 1308:            lb   t1, 0(t0)       # le caractere %
000004d5 : 006280a3;   % 1309:            sb   t1, 1(t0)       # escreve no proximo %
000004d6 : fff28293;   % 1310:            addi t0, t0, -1      # decrementa endereco %
000004d7 : ff1ff06f;   % 1311:            j insere0Aloop       # volta ao loop %
000004d8 : 03000313;   % 1312: saiinsere0AreadFloat: li t1, '0'        # ascii '0' %
000004d9 : 00628023;   % 1313:            sb t1, 0(t0)         # escreve '0' no primeiro caractere %
000004da : 00040303;   % 1315: leUltimoreadFloat: lb   t1, 0(s0)           # le ultimo caractere %
000004db : 06500213;   % 1316:         li  tp, 'e'             # TP = 101 = 'e' %
000004dc : 00430c63;   % 1317:         beq     t1, tp, insere0PreadFloat   # insere '0' depois %
000004dd : 04500213;   % 1318:         li  tp, 'E'             # TP = 69 = 'E' %
000004de : 00430863;   % 1319:         beq     t1, tp, insere0PreadFloat   # insere '0' depois %
000004df : 02e00213;   % 1320:         li  tp, '.'             # TP = 46 = '.' %
000004e0 : 00430463;   % 1321:         beq     t1, tp, insere0PreadFloat   # insere '0' depois %
000004e1 : 0180006f;   % 1322:         j   inicioreadFloat %
000004e2 : 00140413;   % 1324: insere0PreadFloat: addi s0, s0, 1       # desloca o ultimo endereco para o proximo %
000004e3 : 00148493;   % 1325:            addi s1, s1, 1       # incrementa o num. caracteres %
000004e4 : 03000313;   % 1326:            li   t1,'0'          # ascii '0' %
000004e5 : 00640023;   % 1327:            sb   t1,0(s0)        # escreve '0' no ultimo %
000004e6 : 000400a3;   % 1328:            sb   zero,1(s0)      # \null do final de string %
000004e7 : d0007553;   % 1330: inicioreadFloat:  fcvt.s.w  fa0, zero   # fa0 Resultado inicialmente zero %
000004e8 : 00a00293;   % 1331:         li  t0, 10          # inteiro 10 %
000004e9 : d002f353;   % 1332:         fcvt.s.w    ft6, t0     # ft6 contem sempre o numero cte 10.0000 %
000004ea : 00100293;   % 1333:         li  t0, 1           # inteiro 1 %
000004eb : d002f0d3;   % 1334:         fcvt.s.w    ft1, t0     # ft1 contem sempre o numero cte 1.0000 %
000004ec : 00140993;   % 1337: procuraEreadFloat:  addi    s3, s0, 1           # inicialmente nao tem 'e' ou 'E' na string (fora da string) %
000004ed : 017002b3;   % 1338:             mv  t0, s7              # endereco inicial %
000004ee : 02828263;   % 1339: loopEreadFloat:     beq     t0, s0, naotemEreadFloat    # sai se nao encontrou 'e' %
000004ef : 00028303;   % 1340:             lb  t1, 0(t0)           # le o caractere %
000004f0 : 06500213;   % 1341:             li  tp, 'e'             # TP = 101 = 'e' %
000004f1 : 00430a63;   % 1342:             beq     t1, tp, ehEreadFloat        # tem 'e' %
000004f2 : 04500213;   % 1343:             li  tp, 'E'             # TP = 69 = 'E' %
000004f3 : 00430663;   % 1344:             beq t1, tp, ehEreadFloat        # tem 'E' %
000004f4 : 00128293;   % 1345:             addi    t0, t0, 1           # incrementa endereco %
000004f5 : fe5ff06f;   % 1346:             j   loopEreadFloat          # volta ao loop %
000004f6 : 005009b3;   % 1347: ehEreadFloat:       mv  s3, t0              # endereco do 'e' ou 'E' na string %
000004f7 : 01300933;   % 1351: procuraPontoreadFloat:  mv  s2, s3              # local inicial do ponto na string (='e' se existir) ou fora da string %
000004f8 : 017002b3;   % 1352:             mv  t0, s7              # endereco inicial %
000004f9 : 00828e63;   % 1353: loopPontoreadFloat:     beq     t0, s0, naotemPontoreadFloat    # sai se nao encontrou '.' %
000004fa : 00028303;   % 1354:             lb  t1, 0(t0)           # le o caractere %
000004fb : 02e00213;   % 1355:             li  tp, '.'             # TP = 46 = '.' %
000004fc : 00430663;   % 1356:             beq     t1, tp, ehPontoreadFloat    # tem '.' %
000004fd : 00128293;   % 1357:             addi    t0, t0, 1           # incrementa endereco %
000004fe : fedff06f;   % 1358:             j   loopPontoreadFloat      # volta ao loop %
000004ff : 00500933;   % 1359: ehPontoreadFloat:   mv  s2, t0              # endereco do '.' na string %
00000500 : d0007153;   % 1363: intreadFloat:       fcvt.s.w    ft2, zero       # zera parte inteira %
00000501 : fff90293;   % 1364:             addi    t0, s2, -1          # endereco do caractere antes do ponto %
00000502 : 201081d3;   % 1365:             fmv.s   ft3, ft1            # ft3 contem unidade/dezenas/centenas %
00000503 : 01700f33;   % 1366:             mv  t5, s7              # Primeiro Endereco %
00000504 : 03e2ca63;   % 1367: loopintreadFloat:   blt     t0, t5, fimintreadFloat     # sai se o endereco for < inicio da string %
00000505 : 00028303;   % 1368:             lb  t1, 0(t0)           # le o caracter %
00000506 : 03000213;   % 1369:             li  tp, '0'             # TP = 48 = '0' %
00000507 : 10434863;   % 1370:             blt     t1, tp, erroreadFloat       # nao eh caractere valido para numero %
00000508 : 03900213;   % 1371:             li  tp, '9'             # TP = 57 = '9' %
00000509 : 10624463;   % 1372:             bgt     t1, tp, erroreadFloat       # nao eh caractere valido para numero %
0000050a : fd030313;   % 1373:             addi    t1, t1, -48         # converte ascii para decimal %
0000050b : d0037153;   % 1374:             fcvt.s.w  ft2, t1           # digito lido em float %
0000050c : 10317153;   % 1376:             fmul.s  ft2,ft2,ft3         # multiplica por un/dezena/centena %
0000050d : 00257553;   % 1377:             fadd.s  fa0,fa0,ft2         # soma no resultado %
0000050e : 1061f1d3;   % 1378:             fmul.s  ft3,ft3,ft6         # proxima dezena/centena %
0000050f : fff28293;   % 1380:             addi    t0,t0,-1            # endereco anterior %
00000510 : fd1ff06f;   % 1381:             j   loopintreadFloat        # volta ao loop %
00000511 : d0007153;   % 1385: fracreadFloat:      fcvt.s.w    ft2, zero       # zera parte fracionaria %
00000512 : 00190293;   % 1386:             addi    t0, s2, 1           # endereco depois do ponto %
00000513 : 1860f1d3;   % 1387:             fdiv.s  ft3, ft1, ft6           # ft3 inicial 0.1 %
00000514 : 0332da63;   % 1389: loopfracreadFloat:  bge     t0, s3, fimfracreadFloat    # endereco eh 'e' 'E' ou >ultimo %
00000515 : 00028303;   % 1390:             lb  t1, 0(t0)           # le o caracter %
00000516 : 03000213;   % 1391:             li  tp, '0'             # TP = 48 = '0' %
00000517 : 0c434863;   % 1392:             blt     t1, tp, erroreadFloat       # nao eh valido %
00000518 : 03900213;   % 1393:             li  tp, '9'             # TP = 57 = '9' %
00000519 : 0c624463;   % 1394:             bgt     t1, tp, erroreadFloat       # nao eh valido %
0000051a : fd030313;   % 1395:             addi    t1, t1, -48         # converte ascii para decimal %
0000051b : d0037153;   % 1396:             fcvt.s.w    ft2, t1         # digito lido em float %
0000051c : 10317153;   % 1398:             fmul.s  ft2, ft2, ft3           # multiplica por ezena/centena %
0000051d : 00257553;   % 1399:             fadd.s  fa0, fa0, ft2           # soma no resultado %
0000051e : 1861f1d3;   % 1400:             fdiv.s  ft3, ft3, ft6           # proxima frac un/dezena/centena %
0000051f : 00128293;   % 1402:             addi    t0, t0, 1           # proximo endereco %
00000520 : fd1ff06f;   % 1403:             j   loopfracreadFloat       # volta ao loop %
00000521 : d0007153;   % 1408: potreadFloat:       fcvt.s.w    ft2, zero       # zera potencia %
00000522 : 00198293;   % 1409:             addi    t0, s3, 1           # endereco seguinte ao 'e' %
00000523 : 00000a13;   % 1410:             li  s4, 0               # sinal do expoente positivo %
00000524 : 00028303;   % 1411:             lb  t1, 0(t0)           # le o caractere seguinte ao 'e' %
00000525 : 02d00213;   % 1412:             li  tp, '-'             # TP = 45 = '-' %
00000526 : 00430863;   % 1413:             beq t1, tp, potsinalnegreadFloat    # sinal do expoente esta escrito e eh positivo %
00000527 : 02b00213;   % 1414:             li  tp, '+'             # TP = 43 = '+' %
00000528 : 00430663;   % 1415:             beq     t1, tp, potsinalposreadFloat    # sinal do expoente eh negativo %
00000529 : 00c0006f;   % 1416:             j   pulapotsinalreadFloat       # nao esta escrito o sinal do expoente %
0000052a : 00100a13;   % 1417: potsinalnegreadFloat:   li  s4, 1               # s4=1 expoente negativo %
0000052b : 00128293;   % 1418: potsinalposreadFloat:   addi    t0, t0, 1           # se tiver '-' ou '+' avanca para o proximo endereco %
0000052c : 00500ab3;   % 1419: pulapotsinalreadFloat:  mv  s5, t0              # Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente %
0000052d : 201081d3;   % 1421:             fmv.s   ft3, ft1            # ft3 un/dez/cen = 1 %
0000052e : 00000393;   % 1424: expreadFloat:       li  t2, 0               # zera expoente %
0000052f : 008002b3;   % 1425:             mv  t0, s0              # endereco do ultimo caractere da string %
00000530 : 00a00e13;   % 1426:             li  t3, 10              # numero dez %
00000531 : 00100e93;   % 1427:             li  t4, 1               # und/dez/cent %
00000532 : 0352c063;   % 1429: loopexpreadFloat:   blt     t0, s5, fimexpreadFloat     # ainda nao eh o endereco do primeiro digito? %
00000533 : 00028303;   % 1430:             lb  t1, 0(t0)           # le o caracter %
00000534 : fd030313;   % 1431:             addi    t1, t1, -48         # converte ascii para decimal %
00000535 : 03d30333;   % 1432:             mul     t1, t1, t4          # mul digito %
00000536 : 006383b3;   % 1433:             add     t2, t2, t1          # soma ao exp %
00000537 : 03ce8eb3;   % 1434:             mul     t4, t4, t3          # proxima casa decimal %
00000538 : fff28293;   % 1435:             addi    t0, t0, -1          # endereco anterior %
00000539 : fe5ff06f;   % 1436:             j loopexpreadFloat          # volta ao loop %
0000053a : 20108153;   % 1440:             fmv.s   ft2, ft1            # numero 10^exp  inicial=1 %
0000053b : 206301d3;   % 1441:             fmv.s   ft3, ft6            # se o sinal for + ft3 eh 10 %
0000053c : 00000213;   % 1442:             li  tp, 0x00000000          # TP = ZERO %
0000053d : 004a0463;   % 1443:             beq     s4, tp, sinalexpPosreadFloat    # se sinal exp positivo %
0000053e : 1860f1d3;   % 1444:             fdiv.s  ft3, ft1, ft6           # se o final for - ft3 eh 0.1 %
0000053f : 00000293;   % 1445: sinalexpPosreadFloat:   li  t0, 0               # contador %
00000540 : 00728863;   % 1446: sinalexpreadFloat:  beq     t0, t2, fimsinalexpreadFloat    # se chegou ao fim %
00000541 : 10317153;   % 1447:             fmul.s  ft2, ft2, ft3           # multiplica pelo fator 10 ou 0.1 %
00000542 : 00128293;   % 1448:             addi    t0, t0, 1           # incrementa o contador %
00000543 : ff5ff06f;   % 1449:             j   sinalexpreadFloat %
00000544 : 10257553;   % 1452:         fmul.s  fa0, fa0, ft2       # multiplicacao final! %
00000545 : 0fc0f297;   % 1454:         la  t0, TempBuffer      # ajuste final do sinal do numero %
00000546 : f8c28293;   % 1454:  %
00000547 : 00028303;   % 1455:         lb  t1, 0(t0)       # le primeiro caractere %
00000548 : 02d00213;   % 1456:         li  tp, '-'         # TP = 45 = '-' %
00000549 : 00431463;   % 1457:         bne     t1, tp, fimreadFloat    # nao eh '-' entao fim %
0000054a : 20a51553;   % 1458:         fneg.s  fa0, fa0        # nega o numero float %
0000054b : 00012083;   % 1461: fimreadFloat:   lw  ra, 0(sp)       # recupera ra %
0000054c : 00410113;   % 1462:         addi    sp, sp, 4       # libera espaco %
0000054d : 00008067;   % 1463:         ret             # retorna %
0000054e : 10008c37;   % 1471: <9> li s8, 0x10008000 # carrega tp %
0000054f : 000c0c13;   % 1471:  %
00000550 : 01819863;   % 1471: <10> bne gp, s8, Time.DE1    # Na DE1 gp = 0 ! N�o tem segmento .extern %
00000551 : 01e00893;   % 1472:     li  a7, 30              # Chama o ecall do Rars %
00000552 : 00000073;   % 1473:     ecall %
00000553 : 00008067;   % 1474:     ret                 # saida %
00000554 : c0102573;   % 1476: Time.DE1:   csrr a0, time           #  Le time LOW %
00000555 : c81025f3;   % 1477:         csrr a1, timeh          #  Le time HIGH %
00000556 : 00008067;   % 1478:         ret %
00000557 : 10008c37;   % 1491: <9> li s8, 0x10008000 # carrega tp %
00000558 : 000c0c13;   % 1491:  %
00000559 : 01819863;   % 1491: <10> bne gp, s8, Sleep.DE1    # Na DE1 gp = 0 ! N�o tem segmento .extern %
0000055a : 02000893;   % 1492:     li  a7, 32              # Chama o ecall do Rars %
0000055b : 00000073;   % 1493:     ecall %
0000055c : 00008067;   % 1494:     ret                 #Saida %
0000055d : c01022f3;   % 1496: Sleep.DE1:  csrr    t0, time        # Le o tempo do sistema %
0000055e : 00a28333;   % 1497:         add     t1, t0, a0      # soma com o tempo solicitado %
0000055f : c01022f3;   % 1498: Sleep.Loop: csrr    t0, time        # Le o tempo do sistema %
00000560 : fe62cee3;   % 1499:         blt t0, t1, Sleep.Loop  # t0<t1 ? %
00000561 : 00008067;   % 1500:         ret %
00000562 : 10008c37;   % 1518: <9> li s8, 0x10008000 # carrega tp %
00000563 : 000c0c13;   % 1518:  %
00000564 : 01819863;   % 1518: <10> bne gp, s8, Random.DE1    # Na DE1 gp = 0 ! N�o tem segmento .extern %
00000565 : 02900893;   % 1519:     li  a7,41           # Chama o ecall do Rars %
00000566 : 00000073;   % 1520:     ecall %
00000567 : 00008067;   % 1521:     ret             # saida %
00000568 : ff2002b7;   % 1523: Random.DE1:     li  t0, 0xFF200514    # carrega endereco do LFSR %
00000569 : 51428293;   % 1523:  %
0000056a : 0002a503;   % 1524:         lw  a0, 0(t0)   # le a word em a0 %
0000056b : 00008067;   % 1525:         ret         # retorna %
0000056c : 00058c63;   % 1535: clsCLS: beq     a1, zero, CLS.frame0 %
0000056d : ff100337;   % 1536:     li      t1, 0xFF100000              # Memoria VGA 1 %
0000056e : 00030313;   % 1536:  %
0000056f : ff1133b7;   % 1537:     li      t2, 0xFF112BFC %
00000570 : bfc38393;   % 1537:  %
00000571 : 0140006f;   % 1538:     j   CLS.pula %
00000572 : ff000337;   % 1539: CLS.frame0:     li      t1, 0xFF000000           # Memoria VGA 0 %
00000573 : 00030313;   % 1539:  %
00000574 : ff0133b7;   % 1540:             li      t2, 0xFF012BFC %
00000575 : bfc38393;   % 1540:  %
00000576 : 0ff57513;   % 1541: CLS.pula:   andi    a0, a0, 0x00FF %
00000577 : 00a002b3;   % 1544:         mv  t0, a0 %
00000578 : 00851513;   % 1545:         slli    a0, a0, 8 %
00000579 : 00a2e2b3;   % 1546:         or  t0, t0, a0 %
0000057a : 00851513;   % 1547:         slli    a0, a0, 8 %
0000057b : 00a2e2b3;   % 1548:         or  t0, t0, a0 %
0000057c : 00851513;   % 1549:         slli    a0, a0, 8 %
0000057d : 00a2e2b3;   % 1550:         or  t0, t0, a0 %
0000057e : 00730863;   % 1552: CLS.for:    beq     t1, t2, CLS.fim %
0000057f : 00532023;   % 1553:         sw      t0, 0(t1) %
00000580 : 00430313;   % 1554:             addi    t1, t1, 4 %
00000581 : ff5ff06f;   % 1555:             j       CLS.for %
00000582 : 00008067;   % 1556: CLS.fim:    ret %
00000583 : ff000837;   % 1565: BRESENHAM:  li  a6, 0xFF000000              # Memoria VGA 0 %
00000584 : 00080813;   % 1565:  %
00000585 : 00078663;   % 1566:         beq a5, zero, pulaBRES %
00000586 : ff100837;   % 1567:         li  a6, 0xFF100000              # Memoria VGA 1 %
00000587 : 00080813;   % 1567:  %
00000588 : 14000893;   % 1569: pulaBRES:   li  a7, 320 %
00000589 : 40b682b3;   % 1570:         sub     t0, a3, a1 %
0000058a : 0002d463;   % 1571:         bge     t0, zero, PULAABRES %
0000058b : 405002b3;   % 1572:         sub     t0, zero, t0 %
0000058c : 40a60333;   % 1573: PULAABRES:  sub     t1, a2, a0 %
0000058d : 00035463;   % 1574:         bge     t1, zero, PULABBRES %
0000058e : 40600333;   % 1575:         sub     t1, zero, t1 %
0000058f : 0262d263;   % 1576: PULABBRES:  bge     t0, t1, PULACBRES %
00000590 : 00a65e63;   % 1577:         ble     a0, a2, PULAC1BRES %
00000591 : 00a007b3;   % 1578:         mv  a5, a0 %
00000592 : 00c00533;   % 1579:         mv  a0, a2 %
00000593 : 00f00633;   % 1580:         mv  a2, a5 %
00000594 : 00b007b3;   % 1581:         mv  a5, a1 %
00000595 : 00d005b3;   % 1582:         mv  a1, a3 %
00000596 : 00f006b3;   % 1583:         mv  a3, a5 %
00000597 : 0240006f;   % 1584: PULAC1BRES: j PLOTLOWBRES %
00000598 : 00b6de63;   % 1586: PULACBRES:  ble     a1, a3, PULAC2BRES %
00000599 : 00a007b3;   % 1587:         mv  a5, a0 %
0000059a : 00c00533;   % 1588:         mv  a0, a2 %
0000059b : 00f00633;   % 1589:         mv  a2, a5 %
0000059c : 00b007b3;   % 1590:         mv  a5, a1 %
0000059d : 00d005b3;   % 1591:         mv  a1, a3 %
0000059e : 00f006b3;   % 1592:         mv  a3, a5 %
0000059f : 0a80006f;   % 1593: PULAC2BRES: j PLOTHIGHBRES %
000005a0 : 40a602b3;   % 1595: PLOTLOWBRES:    sub     t0, a2, a0      # dx=x1-x0 %
000005a1 : 40b68333;   % 1596:         sub     t1, a3, a1      # dy y1-y0 %
000005a2 : 00100393;   % 1597:         li      t2, 1           # yi=1 %
000005a3 : 00035663;   % 1598:         bge     t1, zero, PULA1BRES # dy>=0 PULA %
000005a4 : fff00393;   % 1599:         li      t2, -1          # yi=-1 %
000005a5 : 40600333;   % 1600:         sub     t1, zero, t1        # dy=-dy %
000005a6 : 00131e13;   % 1601: PULA1BRES:  slli    t3, t1, 1       # 2*dy %
000005a7 : 405e0e33;   % 1602:         sub     t3, t3, t0      # D=2*dy-dx %
000005a8 : 00b00eb3;   % 1603:         mv  t4, a1          # y=y0 %
000005a9 : 00a00f33;   % 1604:         mv  t5, a0          # x=x0 %
000005aa : 30102c73;   % 1606: <29> csrr s8, misa %
000005ab : 00cc5c13;   % 1606: <30> srli s8, s8, 12 %
000005ac : 001c7c13;   % 1606: <31> andi s8, s8, 0x001 %
000005ad : 020c1e63;   % 1606: <32> bnez s8, BRESENHAM.mul1 %
000005ae : ff410113;   % 1607: <45> addi    sp, sp, -12 %
000005af : 00a12023;   % 1607: <46> sw  a0, 0(sp) %
000005b0 : 00b12223;   % 1607: <47> sw  a1, 4(sp) %
000005b1 : 00112423;   % 1607: <48> sw  ra, 8(sp) %
000005b2 : 01d00533;   % 1607: <50> mv  a0, t4 %
000005b3 : 011005b3;   % 1607: <51> mv  a1, a7 %
000005b4 : 2d8000ef;   % 1607: <52> jal     __mulsi3 %
000005b5 : 04051073;   % 1607: <53> csrw    a0,uscratch %
000005b6 : 00012503;   % 1607: <55> lw  a0, 0(sp) %
000005b7 : 00412583;   % 1607: <56> lw  a1, 4(sp) %
000005b8 : 00812083;   % 1607: <57> lw  ra, 8(sp) %
000005b9 : 00c10113;   % 1607: <58> addi    sp, sp, 12 %
000005ba : 04002ff3;   % 1607: <59> csrr    t6,uscratch %
000005bb : 0080006f;   % 1608:         j BRESENHAM.mul1d %
000005bc : 031e8fb3;   % 1609: BRESENHAM.mul1: mul     t6, t4, a7      # y*320 %
000005bd : 01ef8fb3;   % 1610: BRESENHAM.mul1d:add     t6, t6, t5      # y*320+x %
000005be : 010f8fb3;   % 1611:         add     t6, t6, a6      # 0xFF000000+y*320+x %
000005bf : 00ef8023;   % 1612:         sb  a4, 0(t6)       # plot com cor a4 %
000005c0 : 01c05863;   % 1614:         ble     t3, zero, PULA2BRES # D<=0 %
000005c1 : 007e8eb3;   % 1615:         add     t4, t4, t2      # y=y+yi %
000005c2 : 00129f93;   % 1616:         slli    t6, t0, 1       # 2*dx %
000005c3 : 41fe0e33;   % 1617:         sub     t3, t3, t6      # D=D-2dx %
000005c4 : 00131f93;   % 1618: PULA2BRES:  slli    t6, t1, 1       # 2*dy %
000005c5 : 01fe0e33;   % 1619:         add     t3, t3, t6      # D=D+2dx %
000005c6 : 001f0f13;   % 1620:         addi    t5, t5, 1 %
000005c7 : f8cf16e3;   % 1621:         bne     t5, a2, LOOPx1BRES %
000005c8 : 00008067;   % 1622:         ret %
000005c9 : 40a602b3;   % 1624: PLOTHIGHBRES:   sub     t0, a2, a0      # dx=x1-x0 %
000005ca : 40b68333;   % 1625:         sub     t1, a3, a1      # dy y1-y0 %
000005cb : 00100393;   % 1626:         li  t2, 1           # xi=1 %
000005cc : 0002d663;   % 1627:         bge     t0, zero, PULA3BRES # dy>=0 PULA %
000005cd : fff00393;   % 1628:         li  t2, -1          # xi=-1 %
000005ce : 405002b3;   % 1629:         sub     t0, zero, t0        # dx=-dx %
000005cf : 00129e13;   % 1630: PULA3BRES:  slli    t3, t0, 1       # 2*dx %
000005d0 : 406e0e33;   % 1631:         sub     t3, t3, t1      # D=2*dx-d1 %
000005d1 : 00a00eb3;   % 1632:         mv  t4, a0          # x=x0 %
000005d2 : 00b00f33;   % 1633:         mv  t5, a1          # y=y0 %
000005d3 : 30102c73;   % 1635: <29> csrr s8, misa %
000005d4 : 00cc5c13;   % 1635: <30> srli s8, s8, 12 %
000005d5 : 001c7c13;   % 1635: <31> andi s8, s8, 0x001 %
000005d6 : 020c1e63;   % 1635: <32> bnez s8, BRESENHAM.mul2 %
000005d7 : ff410113;   % 1636: <45> addi    sp, sp, -12 %
000005d8 : 00a12023;   % 1636: <46> sw  a0, 0(sp) %
000005d9 : 00b12223;   % 1636: <47> sw  a1, 4(sp) %
000005da : 00112423;   % 1636: <48> sw  ra, 8(sp) %
000005db : 01e00533;   % 1636: <50> mv  a0, t5 %
000005dc : 011005b3;   % 1636: <51> mv  a1, a7 %
000005dd : 234000ef;   % 1636: <52> jal     __mulsi3 %
000005de : 04051073;   % 1636: <53> csrw    a0,uscratch %
000005df : 00012503;   % 1636: <55> lw  a0, 0(sp) %
000005e0 : 00412583;   % 1636: <56> lw  a1, 4(sp) %
000005e1 : 00812083;   % 1636: <57> lw  ra, 8(sp) %
000005e2 : 00c10113;   % 1636: <58> addi    sp, sp, 12 %
000005e3 : 04002ff3;   % 1636: <59> csrr    t6,uscratch %
000005e4 : 0080006f;   % 1637:         j BRESENHAM.mul2d %
000005e5 : 031f0fb3;   % 1638: BRESENHAM.mul2: mul     t6, t5, a7      # y*320 %
000005e6 : 01df8fb3;   % 1639: BRESENHAM.mul2d:add     t6, t6, t4      # y*320+x %
000005e7 : 010f8fb3;   % 1640:         add     t6, t6, a6      # 0xFF000000+y*320+x %
000005e8 : 00ef8023;   % 1641:         sb  a4, 0(t6)       # plot com cor a4 %
000005e9 : 01c05863;   % 1643:         ble     t3, zero, PULA4BRES # D<=0 %
000005ea : 007e8eb3;   % 1644:         add     t4, t4, t2      # x=x+xi %
000005eb : 00131f93;   % 1645:         slli    t6, t1, 1       # 2*dy %
000005ec : 41fe0e33;   % 1646:         sub     t3, t3, t6      # D=D-2dy %
000005ed : 00129f93;   % 1647: PULA4BRES:  slli    t6, t0, 1       # 2*dy %
000005ee : 01fe0e33;   % 1648:         add     t3, t3, t6      # D=D+2dx %
000005ef : 001f0f13;   % 1649:         addi    t5, t5, 1 %
000005f0 : f8df16e3;   % 1650:         bne     t5, a3, LOOPx2BRES %
000005f1 : 00008067;   % 1651:         ret %
000005f2 : ffc10113;   % 1666: printIntUnsigned:   addi    sp, sp, -4      # Aloca espaco %
000005f3 : 00112023;   % 1667:         sw  ra, 0(sp)           # salva ra %
000005f4 : 0fc0f297;   % 1668:         la  t0, TempBuffer          # carrega o Endereco do Buffer da String %
000005f5 : cd028293;   % 1668:  %
000005f6 : 00a00393;   % 1670:         li  t2, 10              # carrega numero 10 %
000005f7 : 00000313;   % 1671:         li  t1, 0               # carrega numero de digitos com 0 %
000005f8 : 30102c73;   % 1673: <29> csrr s8, misa %
000005f9 : 00cc5c13;   % 1673: <30> srli s8, s8, 12 %
000005fa : 001c7c13;   % 1673: <31> andi s8, s8, 0x001 %
000005fb : 160c1463;   % 1673: <32> bnez s8, printIntUnsigned.pula1 %
000005fc : ff010113;   % 1674: <65> addi    sp, sp, -16 %
000005fd : 00a12023;   % 1674: <66> sw  a0, 0(sp) %
000005fe : 00e12223;   % 1674: <67> sw  a4, 4(sp) %
000005ff : 00f12423;   % 1674: <68> sw  a5, 8(sp) %
00000600 : 00112623;   % 1674: <69> sw  ra, 12(sp) %
00000601 : 00a00533;   % 1674: <70> mv  a0, a0 %
00000602 : 00155713;   % 1674: <71> srli    a4,a0,1 %
00000603 : 00255793;   % 1674: <72> srli    a5,a0,2 %
00000604 : 00f707b3;   % 1674: <73> add     a5,a4,a5 %
00000605 : 0047d713;   % 1674: <74> srli    a4,a5,4 %
00000606 : 00f70733;   % 1674: <75> add     a4,a4,a5 %
00000607 : 00875793;   % 1674: <76> srli    a5,a4,8 %
00000608 : 00e78733;   % 1674: <77> add     a4,a5,a4 %
00000609 : 01075793;   % 1674: <78> srli    a5,a4,16 %
0000060a : 00e787b3;   % 1674: <79> add     a5,a5,a4 %
0000060b : 0037d793;   % 1674: <80> srli    a5,a5,3 %
0000060c : 00279713;   % 1674: <81> slli    a4,a5,2 %
0000060d : 00f70733;   % 1674: <82> add     a4,a4,a5 %
0000060e : 00171713;   % 1674: <83> slli    a4,a4,1 %
0000060f : 40e50533;   % 1674: <84> sub     a0,a0,a4 %
00000610 : 00a53513;   % 1674: <85> sltiu   a0,a0,10 %
00000611 : 00154513;   % 1674: <86> xori    a0,a0,1 %
00000612 : 00f50533;   % 1674: <87> add     a0,a0,a5 %
00000613 : 04051073;   % 1674: <88> csrw    a0,uscratch %
00000614 : 00012503;   % 1674: <89> lw  a0, 0(sp) %
00000615 : 00412703;   % 1674: <90> lw  a4, 4(sp) %
00000616 : 00812783;   % 1674: <91> lw  a5, 8(sp) %
00000617 : 00c12083;   % 1674: <92> lw  ra, 12(sp) %
00000618 : 01010113;   % 1674: <93> addi    sp, sp, 16 %
00000619 : 04002ef3;   % 1674: <94> csrr    t4,uscratch %
0000061a : ff010113;   % 1675: <122> addi    sp,sp,-16 %
0000061b : 00a12023;   % 1675: <123> sw  a0,0(sp) %
0000061c : 00b12223;   % 1675: <124> sw  a1,4(sp) %
0000061d : 00c12423;   % 1675: <125> sw  a2,8(sp) %
0000061e : 00d12623;   % 1675: <126> sw  a3,12(sp) %
0000061f : 00a006b3;   % 1675: <128> mv  a3,a0 %
00000620 : 00a00613;   % 1675: <129> li  a2,10 %
00000621 : ff010113;   % 1675: <65> addi    sp, sp, -16 %
00000622 : 00a12023;   % 1675: <66> sw  a0, 0(sp) %
00000623 : 00e12223;   % 1675: <67> sw  a4, 4(sp) %
00000624 : 00f12423;   % 1675: <68> sw  a5, 8(sp) %
00000625 : 00112623;   % 1675: <69> sw  ra, 12(sp) %
00000626 : 00d00533;   % 1675: <70> mv  a0, a3 %
00000627 : 00155713;   % 1675: <71> srli    a4,a0,1 %
00000628 : 00255793;   % 1675: <72> srli    a5,a0,2 %
00000629 : 00f707b3;   % 1675: <73> add     a5,a4,a5 %
0000062a : 0047d713;   % 1675: <74> srli    a4,a5,4 %
0000062b : 00f70733;   % 1675: <75> add     a4,a4,a5 %
0000062c : 00875793;   % 1675: <76> srli    a5,a4,8 %
0000062d : 00e78733;   % 1675: <77> add     a4,a5,a4 %
0000062e : 01075793;   % 1675: <78> srli    a5,a4,16 %
0000062f : 00e787b3;   % 1675: <79> add     a5,a5,a4 %
00000630 : 0037d793;   % 1675: <80> srli    a5,a5,3 %
00000631 : 00279713;   % 1675: <81> slli    a4,a5,2 %
00000632 : 00f70733;   % 1675: <82> add     a4,a4,a5 %
00000633 : 00171713;   % 1675: <83> slli    a4,a4,1 %
00000634 : 40e50533;   % 1675: <84> sub     a0,a0,a4 %
00000635 : 00a53513;   % 1675: <85> sltiu   a0,a0,10 %
00000636 : 00154513;   % 1675: <86> xori    a0,a0,1 %
00000637 : 00f50533;   % 1675: <87> add     a0,a0,a5 %
00000638 : 04051073;   % 1675: <88> csrw    a0,uscratch %
00000639 : 00012503;   % 1675: <89> lw  a0, 0(sp) %
0000063a : 00412703;   % 1675: <90> lw  a4, 4(sp) %
0000063b : 00812783;   % 1675: <91> lw  a5, 8(sp) %
0000063c : 00c12083;   % 1675: <92> lw  ra, 12(sp) %
0000063d : 01010113;   % 1675: <93> addi    sp, sp, 16 %
0000063e : 04002573;   % 1675: <94> csrr    a0,uscratch %
0000063f : ff410113;   % 1675: <45> addi    sp, sp, -12 %
00000640 : 00a12023;   % 1675: <46> sw  a0, 0(sp) %
00000641 : 00b12223;   % 1675: <47> sw  a1, 4(sp) %
00000642 : 00112423;   % 1675: <48> sw  ra, 8(sp) %
00000643 : 00a00533;   % 1675: <50> mv  a0, a0 %
00000644 : 00c005b3;   % 1675: <51> mv  a1, a2 %
00000645 : 094000ef;   % 1675: <52> jal     __mulsi3 %
00000646 : 04051073;   % 1675: <53> csrw    a0,uscratch %
00000647 : 00012503;   % 1675: <55> lw  a0, 0(sp) %
00000648 : 00412583;   % 1675: <56> lw  a1, 4(sp) %
00000649 : 00812083;   % 1675: <57> lw  ra, 8(sp) %
0000064a : 00c10113;   % 1675: <58> addi    sp, sp, 12 %
0000064b : 040025f3;   % 1675: <59> csrr    a1,uscratch %
0000064c : 40b68e33;   % 1675: <132> sub     t3,a3,a1 %
0000064d : 040e1073;   % 1675: <134> csrw    t3,uscratch %
0000064e : 00012503;   % 1675: <135> lw  a0,0(sp) %
0000064f : 00412583;   % 1675: <136> lw  a1,4(sp) %
00000650 : 00812603;   % 1675: <137> lw  a2,8(sp) %
00000651 : 00c12683;   % 1675: <138> lw  a3,12(sp) %
00000652 : 01010113;   % 1675: <139> addi    sp,sp,16 %
00000653 : 04002e73;   % 1675: <140> csrr    t3,uscratch %
00000654 : 00c0006f;   % 1676:             j   printIntUnsigned.pula1d %
00000655 : 02755eb3;   % 1677: printIntUnsigned.pula1: divu    t4, a0, t2          # divide por 10 (quociente) %
00000656 : 02757e33;   % 1678:             remu    t3, a0, t2          # resto %
00000657 : ffc10113;   % 1679: printIntUnsigned.pula1d:addi    sp, sp, -4          # aloca espaco na pilha %
00000658 : 01c12023;   % 1680:         sw  t3, 0(sp)           # coloca resto na pilha %
00000659 : 01d00533;   % 1681:         mv  a0, t4              # atualiza o numero com o quociente %
0000065a : 00130313;   % 1682:         addi    t1, t1, 1           # incrementa o contador de digitos %
0000065b : e6051ae3;   % 1683:         bne     a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
0000065c : 00012383;   % 1685: printIntUnsigned.loop2: lw  t2, 0(sp)       # le digito da pilha %
0000065d : 00410113;   % 1686:         addi    sp, sp, 4           # libera espaco %
0000065e : 03038393;   % 1687:         addi    t2, t2, 48          # converte o digito para ascii %
0000065f : 00728023;   % 1688:         sb  t2, 0(t0)           # coloca caractere no buffer %
00000660 : 00128293;   % 1689:         addi    t0, t0, 1           # incrementa endereco do buffer %
00000661 : fff30313;   % 1690:         addi    t1, t1, -1          # decrementa contador de digitos %
00000662 : fe0314e3;   % 1691:         bne     t1, zero, printIntUnsigned.loop2# eh o ultimo? %
00000663 : 00028023;   % 1692:         sb  zero, 0(t0)         # insere \NULL na string %
00000664 : 0fc0f517;   % 1694:         la  a0, TempBuffer          # Endereco do buffer da srting %
00000665 : b1050513;   % 1694:  %
00000666 : a6cff0ef;   % 1695:         jal     printString         # chama o print string %
00000667 : 00012083;   % 1697:         lw  ra, 0(sp)           # recupera a %
00000668 : 00410113;   % 1698:         addi    sp, sp, 4           # libera espaco %
00000669 : 00008067;   % 1699: printIntUnsigned.fim:   ret %
0000066a : ff410113;   % 1712: __mulsi3:   addi    sp,sp,-12 %
0000066b : 00b12023;   % 1713:         sw  a1,0(sp) %
0000066c : 00e12223;   % 1714:         sw  a4,4(sp) %
0000066d : 00f12423;   % 1715:         sw  a5,8(sp) %
0000066e : 00a007b3;   % 1717:         mv      a5,a0 %
0000066f : 00000513;   % 1718:             li      a0,0 %
00000670 : 00078e63;   % 1719: mulsi3.L4:  beqz    a5,mulsi3.L1 %
00000671 : 0017f713;   % 1720:             andi    a4,a5,1 %
00000672 : 00070463;   % 1721:             beqz    a4,mulsi3.L3 %
00000673 : 00b50533;   % 1722:             add     a0,a0,a1 %
00000674 : 0017d793;   % 1723: mulsi3.L3:  srli    a5,a5,1 %
00000675 : 00159593;   % 1724:             slli    a1,a1,1 %
00000676 : fe9ff06f;   % 1725:             j       mulsi3.L4 %
00000677 : 00012583;   % 1727: mulsi3.L1:  lw  a1,0(sp) %
00000678 : 00412703;   % 1728:         lw  a4,4(sp) %
00000679 : 00812783;   % 1729:         lw  a5,8(sp) %
0000067a : 00c10113;   % 1730:         addi    sp,sp,12 %
0000067b : 00008067;   % 1731:         ret %
0000067c : ff010113;   % 1735: __udivsi3:  addi    sp,sp,-16 %
0000067d : 00b12023;   % 1736:         sw  a1,0(sp) %
0000067e : 00d12223;   % 1737:         sw  a3,4(sp) %
0000067f : 00e12423;   % 1738:         sw  a4,8(sp) %
00000680 : 00f12623;   % 1739:         sw  a5,12(sp) %
00000681 : 00a00733;   % 1741:         mv      a4,a0 %
00000682 : 00155693;   % 1742:             srli    a3,a0,1 %
00000683 : 00100793;   % 1743:             li      a5,1 %
00000684 : 00b6e863;   % 1744: udivsi3.L3:     bltu    a3,a1,udivsi3.L6 %
00000685 : 00179793;   % 1745:             slli    a5,a5,1 %
00000686 : 00159593;   % 1746:             slli    a1,a1,1 %
00000687 : ff5ff06f;   % 1747:             j       udivsi3.L3 %
00000688 : 00000513;   % 1748: udivsi3.L6:     li      a0,0 %
00000689 : 00078e63;   % 1749: udivsi3.L2:     beqz    a5,udivsi3.L1 %
0000068a : 00b76663;   % 1750:             bltu    a4,a1,udivsi3.L5 %
0000068b : 40b70733;   % 1751:             sub     a4,a4,a1 %
0000068c : 00f50533;   % 1752:             add     a0,a0,a5 %
0000068d : 0017d793;   % 1753: udivsi3.L5:     srli    a5,a5,1 %
0000068e : 0015d593;   % 1754:             srli    a1,a1,1 %
0000068f : fe9ff06f;   % 1755:             j       udivsi3.L2 %
00000690 : 00012583;   % 1757: udivsi3.L1:     lw  a1,0(sp) %
00000691 : 00412683;   % 1758:         lw  a3,4(sp) %
00000692 : 00812703;   % 1759:         lw  a4,8(sp) %
00000693 : 00c12783;   % 1760:         lw  a5,12(sp) %
00000694 : 01010113;   % 1761:         addi    sp,sp,16 %
00000695 : 00008067;   % 1762:             ret %
00000696 : ff410113;   % 1765: __umodsi3:  addi    sp, sp, -12 %
00000697 : 00512023;   % 1766:         sw  t0, 0(sp) %
00000698 : 00612223;   % 1767:         sw  t1, 4(sp) %
00000699 : 00112423;   % 1768:         sw  ra, 8(sp) %
0000069a : 00a002b3;   % 1769:         mv  t0, a0      # dividendo %
0000069b : 00b00333;   % 1770:         mv  t1, a1      # divisor %
0000069c : f81ff0ef;   % 1771:         jal     __udivsi3 %
0000069d : 006005b3;   % 1772:         mv  a1, t1      # quociente * divisor %
0000069e : f31ff0ef;   % 1773:         jal     __mulsi3 %
0000069f : 40a28533;   % 1774:         sub     a0, t0, a0  # dividendo-quociente*divisor %
000006a0 : 00012283;   % 1775:         lw  t0, 0(sp) %
000006a1 : 00412303;   % 1776:         lw  t1, 4(sp) %
000006a2 : 00812083;   % 1777:         lw  ra, 8(sp) %
000006a3 : 00c10113;   % 1778:         addi    sp, sp, 12 %
000006a4 : 00008067;   % 1779:         ret %
000006a5 : ff010113;   % 1782: __divsi3:   addi    sp, sp, -16 %
000006a6 : 00512023;   % 1783:         sw  t0, 0(sp) %
000006a7 : 00612223;   % 1784:         sw  t1, 4(sp) %
000006a8 : 00712423;   % 1785:         sw  t2, 8(sp) %
000006a9 : 00112623;   % 1786:         sw  ra, 12(sp) %
000006aa : 41f55293;   % 1787:         srai    t0,a0,31    # indica se a0 � pos(0) ou neg (2^32-1) %
000006ab : 41f5d313;   % 1788:         srai    t1,a1,31    # indica se a1 � pos(0) ou neg (2^32-1) %
000006ac : 0062c3b3;   % 1789:         xor t2,t0,t1    # indica se deve(!=0) ou n�o(==0) inverter o sinal do resultado %
000006ad : 00028463;   % 1790:         beqz    t0,divsi3.pula1 %
000006ae : 40a00533;   % 1791:         neg a0,a0       # nega %
000006af : 00030463;   % 1792: divsi3.pula1:   beqz    t1,divsi3.pula2 %
000006b0 : 40b005b3;   % 1793:         neg a1,a1       # nega %
000006b1 : f2dff0ef;   % 1794: divsi3.pula2:   jal     __udivsi3   # divis�o unsigned %
000006b2 : 00038463;   % 1795:         beqz    t2, divsi3.pula3 %
000006b3 : 40a00533;   % 1796:         neg a0,a0       # nega %
000006b4 : 00012283;   % 1797: divsi3.pula3:   lw  t0, 0(sp) %
000006b5 : 00412303;   % 1798:         lw  t1, 4(sp) %
000006b6 : 00812383;   % 1799:         lw  t2, 8(sp) %
000006b7 : 00c12083;   % 1800:         lw  ra, 12(sp) %
000006b8 : 01010113;   % 1801:         addi    sp, sp, 16 %
000006b9 : 00008067;   % 1802:         ret %
000006ba : ff410113;   % 1805: __modsi3:   addi    sp, sp, -12 %
000006bb : 00512023;   % 1806:         sw  t0, 0(sp) %
000006bc : 00612223;   % 1807:         sw  t1, 4(sp) %
000006bd : 00112423;   % 1808:         sw  ra, 8(sp) %
000006be : 41f55293;   % 1809:         srai    t0,a0,31    # indica se a0 � pos(0) ou neg (2^32-1) %
000006bf : 41f5d313;   % 1810:         srai    t1,a1,31    # indica se a1 � pos(0) ou neg (2^32-1) %
000006c0 : 00028463;   % 1811:         beqz    t0,modsi3.pula1 %
000006c1 : 40a00533;   % 1812:         neg a0,a0       # nega %
000006c2 : 00030463;   % 1813: modsi3.pula1:   beqz    t1,modsi3.pula2 %
000006c3 : 40b005b3;   % 1814:         neg a1,a1       # nega %
000006c4 : f49ff0ef;   % 1815: modsi3.pula2:   jal     __umodsi3   # resto unsigned %
000006c5 : 00028463;   % 1816:         beqz    t0, modsi3.pula3    # sinal do dividendo %
000006c6 : 40a00533;   % 1817:         neg a0,a0       # nega %
000006c7 : 00012283;   % 1818: modsi3.pula3:   lw  t0, 0(sp) %
000006c8 : 00412303;   % 1819:         lw  t1, 4(sp) %
000006c9 : 00812083;   % 1820:         lw  ra, 8(sp) %
000006ca : 00c10113;   % 1821:         addi    sp, sp, 12 %
000006cb : 00008067;   % 1822:         ret %
END;
